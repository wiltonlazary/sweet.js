{"version":3,"sources":["shift-reader.js"],"names":[],"mappings":"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","file":"shift-reader.js","sourcesContent":["import Tokenizer from \"shift-parser/dist/tokenizer\";\nimport { TokenClass, TokenType } from \"shift-parser/dist/tokenizer\";\nimport { List } from \"immutable\";\nimport Syntax from \"./syntax\";\nimport * as R from 'ramda';\nimport { Maybe } from 'ramda-fantasy';\nimport { assert } from './errors';\nconst Just = Maybe.Just;\nconst Nothing = Maybe.Nothing;\nimport Term from './terms';\n\nconst LSYNTAX = { name: 'left-syntax' };\nconst RSYNTAX = { name: 'right-syntax' };\n\n\n// TODO: also, need to handle contextual yield\nconst literalKeywords = ['this', 'null', 'true', 'false'];\n\n// Token -> Boolean\nconst isLeftBracket  = R.whereEq({ type: TokenType.LBRACK });\nconst isLeftBrace    = R.whereEq({ type: TokenType.LBRACE });\nconst isLeftParen    = R.whereEq({ type: TokenType.LPAREN });\nconst isRightBracket = R.whereEq({ type: TokenType.RBRACK });\nconst isRightBrace   = R.whereEq({ type: TokenType.RBRACE });\nconst isRightParen   = R.whereEq({ type: TokenType.RPAREN });\n\nconst isEOS = R.whereEq({ type: TokenType.EOS });\n\nconst isHash = R.whereEq({ type: TokenType.IDENTIFIER, value: '#'});\nconst isLeftSyntax = R.whereEq({ type: LSYNTAX });\nconst isRightSyntax = R.whereEq({ type: RSYNTAX });\n\nconst isLeftDelimiter = R.anyPass([isLeftBracket,\n                                   isLeftBrace,\n                                   isLeftParen,\n                                   isLeftSyntax]);\n\nconst isRightDelimiter = R.anyPass([isRightBracket,\n                                    isRightBrace,\n                                    isRightParen,\n                                    isRightSyntax]);\n\nconst isMatchingDelimiters = R.cond([\n  [isLeftBracket, (_, b) => isRightBracket(b)],\n  [isLeftBrace, (_, b) => isRightBrace(b)],\n  [isLeftParen, (_, b) => isRightParen(b)],\n  [isLeftSyntax, (_, b) => isRightSyntax(b)],\n  [R.T, R.F]\n]);\n\nconst assignOps =  [\"=\", \"+=\", \"-=\", \"*=\", \"/=\", \"%=\", \"<<=\", \">>=\", \">>>=\",\n                  \"&=\", \"|=\", \"^=\", \",\"];\n\nconst binaryOps = [\"+\", \"-\", \"*\", \"/\", \"%\",\"<<\", \">>\", \">>>\", \"&\", \"|\", \"^\",\n                 \"&&\", \"||\", \"?\", \":\",\n                 \"===\", \"==\", \">=\", \"<=\", \"<\", \">\", \"!=\", \"!==\", \"instanceof\"];\n\nconst unaryOps = [\"++\", \"--\", \"~\", \"!\", \"delete\", \"void\", \"typeof\", \"yield\", \"throw\", \"new\"];\n\n// List -> Boolean\nconst isEmpty = R.whereEq({size: 0});\n\n// Syntax -> Boolean\nconst isPunctuator = s => s.isPunctuator();\nconst isKeyword = s => s.isKeyword();\nconst isDelimiter = s => s.isDelimiter();\nconst isParens = s => s.isParens();\nconst isBraces = s => s.isBraces();\nconst isBrackets = s => s.isBrackets();\nconst isIdentifier = s => s.isIdentifier();\n\n// Syntax -> any\nconst val = s => s.val();\n// Any -> Syntax -> Boolean\nconst isVal = R.curry((v, s) => s.val() === v);\n\n// Syntax -> Boolean\nconst isDot = R.allPass([isPunctuator, isVal('.')]);\nconst isColon = R.allPass([isPunctuator, isVal(':')]);\nconst isFunctionKeyword = R.allPass([isKeyword, isVal('function')]);\nconst isOperator = s => (s.isPunctuator() || s.isKeyword()) &&\n                          R.any(R.equals(s.val()),\n                                assignOps.concat(binaryOps).concat(unaryOps));\nconst isNonLiteralKeyword = R.allPass([isKeyword,\n                                       s => R.none(R.equals(s.val()), literalKeywords)]);\nconst isKeywordExprPrefix = R.allPass([isKeyword,\n  s => R.any(R.equals(s.val()), ['instanceof', 'typeof', 'delete', 'void',\n                                  'yield', 'throw', 'new', 'case'])]);\n// List a -> a?\nlet last = p => p.last();\n// List a -> Maybe a\nlet safeLast = R.pipe(R.cond([\n  [isEmpty, R.always(Nothing())],\n  [R.T, R.compose(Maybe.of, last)]\n]));\n\n// TODO: better name\n// List -> Boolean -> Maybe List\nlet stuffTrue = R.curry((p, b) => b ? Just(p) : Nothing());\nlet stuffFalse = R.curry((p, b) => !b ? Just(p) : Nothing());\n\n// List a -> Boolean\nlet isTopColon = R.pipe(\n  safeLast,\n  R.map(isColon),\n  Maybe.maybe(false, R.identity)\n);\n// List a -> Boolean\nlet isTopPunctuator = R.pipe(\n  safeLast,\n  R.map(isPunctuator),\n  Maybe.maybe(false, R.identity)\n);\n\n// Number -> List -> Boolean\nlet isExprReturn = R.curry((l, p) => {\n  let retKwd = safeLast(p);\n  let maybeDot = pop(p).chain(safeLast);\n\n  if (maybeDot.map(isDot).getOrElse(false)) {\n    return true;\n  }\n  return retKwd.map(s => {\n    return s.isKeyword() && s.val() === 'return' && s.lineNumber() === l;\n  }).getOrElse(false);\n});\n\nconst isTopOperator = R.pipe(\n  safeLast,\n  R.map(isOperator),\n  Maybe.maybe(false, R.identity)\n);\n\nconst isTopKeywordExprPrefix = R.pipe(\n  safeLast,\n  R.map(isKeywordExprPrefix),\n  Maybe.maybe(false, R.identity)\n);\n\n// Number -> Boolean -> List -> Boolean\nlet isExprPrefix = R.curry((l, b) => R.cond([\n  // ... ({x: 42} /r/i)\n  [isEmpty, R.always(b)],\n  // ... ({x: {x: 42} /r/i })\n  [isTopColon, R.always(b)],\n  // ... throw {x: 42} /r/i\n  [isTopKeywordExprPrefix, R.T],\n  // ... 42 + {x: 42} /r/i\n  [isTopOperator, R.T],\n  // ... for ( ; {x: 42}/r/i)\n  [isTopPunctuator, R.always(b)],\n  // ... return {x: 42} /r /i\n  // ... return\\n{x: 42} /r /i\n  [isExprReturn(l), R.T],\n  [R.T, R.F],\n]));\n\n// List a -> Maybe List a\nlet curly = p => safeLast(p).map(isBraces).chain(stuffTrue(p));\nlet paren = p => safeLast(p).map(isParens).chain(stuffTrue(p));\nlet func = p => safeLast(p).map(isFunctionKeyword).chain(stuffTrue(p));\nlet ident = p => safeLast(p).map(isIdentifier).chain(stuffTrue(p));\nlet nonLiteralKeyword = p => safeLast(p).map(isNonLiteralKeyword).chain(stuffTrue(p));\n\nlet opt = R.curry((a, b, p) => {\n  let result = R.pipeK(a, b)(Maybe.of(p));\n  return Maybe.isJust(result) ? result : Maybe.of(p);\n});\n\nlet notDot = R.ifElse(\n  R.whereEq({size: 0}),\n  Just,\n  p => safeLast(p).map(s => !(s.isPunctuator() && s.val() === '.')).chain(stuffTrue(p))\n);\n\n// List a -> Maybe List a\nlet pop = R.compose(Just, p => p.pop());\n\n// Maybe List a -> Maybe List a\nconst functionPrefix = R.pipeK(\n    curly,\n    pop,\n    paren,\n    pop,\n    opt(ident, pop),\n    func);\n\n// Boolean -> List a -> Boolean\nconst isRegexPrefix = b => R.anyPass([\n  // ε\n  isEmpty,\n  // P . t   where t ∈ Punctuator\n  isTopPunctuator,\n  // P . t . t'  where t \\not = \".\" and t' ∈ (Keyword \\setminus  LiteralKeyword)\n  R.pipe(\n    Maybe.of,\n    R.pipeK(\n      nonLiteralKeyword,\n      pop,\n      notDot\n    ),\n    Maybe.isJust\n  ),\n  // P . t . t' . (T)  where t \\not = \".\" and t' ∈ (Keyword \\setminus LiteralKeyword)\n  R.pipe(\n    Maybe.of,\n    R.pipeK(\n      paren,\n      pop,\n      nonLiteralKeyword,\n      pop,\n      notDot\n    ),\n    Maybe.isJust\n  ),\n  // P . function^l . x? . () . {}     where isExprPrefix(P, b, l) = false\n  R.pipe(\n    Maybe.of,\n    functionPrefix,\n    R.chain(p => {\n        return safeLast(p)\n          .map(s => s.lineNumber())\n          .chain(fnLine => {\n            return pop(p).map(isExprPrefix(fnLine, b));\n          })\n          .chain(stuffFalse(p));\n      }\n    ),\n    Maybe.isJust\n  ),\n  // P . {T}^l  where isExprPrefix(P, b, l) = false\n  p => {\n    let isCurly = Maybe.isJust(safeLast(p).map(isBraces));\n    let alreadyCheckedFunction = R.pipe(\n      Maybe.of,\n      functionPrefix,\n      Maybe.isJust\n    )(p);\n    if (alreadyCheckedFunction) {\n      return false;\n    }\n    return R.pipe(\n      Maybe.of,\n      R.chain(curly),\n      R.chain(p => {\n        return safeLast(p)\n        .map(s => s.lineNumber())\n        .chain(curlyLine => {\n          return pop(p).map(isExprPrefix(curlyLine, b));\n        })\n        .chain(stuffFalse(p));\n      }),\n      Maybe.isJust\n    )(p);\n  }\n\n\n]);\n\nfunction lastEl(l) {\n  return l[l.length - 1];\n}\n\nexport default class Reader extends Tokenizer {\n  constructor(strings, context, replacements) {\n    super(Array.isArray(strings) ? strings.join('') : strings);\n    this.delimStack = new Map();\n    this.insideSyntaxTemplate = [false];\n    this.context = context;\n\n    // setup splicing replacement array\n    if (Array.isArray(strings)) {\n      let totalIndex = 0;\n      this.replacementIndex = R.reduce((acc, strRep) => {\n        acc.push({\n          index: totalIndex + strRep[0].length,\n          replacement: strRep[1]\n        });\n        totalIndex += strRep[0].length;\n        return acc;\n      }, [], R.zip(strings, replacements));\n    }\n  }\n\n  read(stack = [], b = false, singleDelimiter = false) {\n    let prefix = List();\n    while (true) {\n      let tok = this.advance(prefix, b);\n\n      // splicing allows syntax and terms\n      if (tok instanceof Syntax || tok instanceof Term) {\n        stack.push(tok);\n        continue;\n      }\n      if (Array.isArray(tok)) {\n        Array.prototype.push.apply(stack, tok);\n        continue;\n      }\n      if (List.isList(tok)) {\n        Array.prototype.push.apply(stack, tok.toArray());\n        continue;\n      }\n\n      if (isEOS(tok)) {\n        if (stack[0] && isLeftDelimiter(stack[0].token)) {\n          throw this.createUnexpected(tok);\n        }\n        break;\n      }\n\n      if (isLeftDelimiter(tok)) {\n        if (isLeftSyntax(tok)) {\n          this.insideSyntaxTemplate.push(true);\n        }\n        let line = tok.slice.startLocation.line;\n        let innerB = isLeftBrace(tok) ? isExprPrefix(line, b)(prefix) : true;\n        let inner = this.read([new Syntax(tok)],\n                              innerB,\n                              false);\n        let stx = new Syntax(inner, this.context);\n        prefix = prefix.concat(stx);\n        stack.push(stx);\n        if (singleDelimiter) {\n          break;\n        }\n      } else if (isRightDelimiter(tok)) {\n        if (stack[0] && !isMatchingDelimiters(stack[0].token, tok)) {\n          throw this.createUnexpected(tok);\n        }\n        let stx = new Syntax(tok, this.context);\n        stack.push(stx);\n        if (lastEl(this.insideSyntaxTemplate) && isRightSyntax(tok)) {\n          this.insideSyntaxTemplate.pop();\n        }\n        break;\n      } else {\n        let stx = new Syntax(tok, this.context);\n        prefix = prefix.concat(stx);\n        stack.push(stx);\n      }\n    }\n    return List(stack);\n  }\n\n  advance(prefix, b)/*: any */ {\n    let startLocation = this.getLocation();\n\n    this.lastIndex = this.index;\n    this.lastLine = this.line;\n    this.lastLineStart = this.lineStart;\n\n    this.skipComment();\n\n    this.startIndex = this.index;\n    this.startLine = this.line;\n    this.startLineStart = this.lineStart;\n\n    if (this.replacementIndex && this.replacementIndex[0] && this.index >= this.replacementIndex[0].index) {\n      let rep = this.replacementIndex[0].replacement;\n      this.replacementIndex.shift();\n      return rep;\n    }\n\n    let charCode = this.source.charCodeAt(this.index);\n\n    if (charCode === 0x60) { // `\n      let element, items = [];\n      let startLocation = this.getLocation();\n      let start = this.index;\n      this.index++;\n      if (lastEl(this.insideSyntaxTemplate)) {\n\n        let slice = this.getSlice(start, startLocation);\n        return {\n          type: RSYNTAX,\n          value: '`',\n          slice: slice\n        };\n      }\n      do {\n        element = this.scanTemplateElement();\n        items.push(element);\n        if (element.interp) {\n          // only read the single delimiter\n          element = this.read([], false, true);\n          assert(element.size === 1, \"should only have read a single delimiter inside a template\");\n          items.push(element.get(0));\n        }\n      } while (!element.tail);\n      return {\n        type: TokenType.TEMPLATE,\n        items: List(items)\n      };\n    } else if (charCode === 35) { // #\n      let startLocation = this.getLocation();\n      let start = this.index;\n      let slice = this.getSlice(start, startLocation);\n      this.index++;\n      // TODO: handle ` inside of syntax template interpolations\n      if (this.source.charCodeAt(this.index) === 0x60) { // `\n        this.index++;\n        return {\n          type: LSYNTAX,\n          value: '#`',\n          slice: slice\n        };\n      }\n      return {\n        type: TokenType.IDENTIFIER,\n        value: '#',\n        slice: slice\n      };\n    }\n\n    let lookahead = super.advance();\n    if (lookahead.type === TokenType.DIV && isRegexPrefix(b)(prefix)) {\n      return super.scanRegExp(\"/\");\n    }\n    return lookahead;\n  }\n\n  // need to override how templates are lexed because of delimiters\n  scanTemplateElement() {\n    let startLocation = this.getLocation();\n    let start = this.index;\n    while (this.index < this.source.length) {\n      let ch = this.source.charCodeAt(this.index);\n      switch (ch) {\n        case 0x60:  // `\n          // don't include the traling \"`\"\n          let slice = this.getSlice(start, startLocation);\n          this.index++;\n          return {\n            type: TokenType.TEMPLATE,\n            tail: true,\n            interp: false,\n            slice: slice\n          };\n        case 0x24:  // $\n          if (this.source.charCodeAt(this.index + 1) === 0x7B) {  // {\n            // don't include the trailing \"$\"\n            let slice = this.getSlice(start, startLocation);\n            this.index += 1;\n            return {\n              type: TokenType.TEMPLATE,\n              tail: false,\n              interp: true,\n              slice: slice\n            };\n          }\n          this.index++;\n          break;\n        case 0x5C:  // \\\\\n        {\n          let octal = this.scanStringEscape(\"\", null)[1];\n          if (octal != null) {\n            throw this.createILLEGAL();\n          }\n          break;\n        }\n        default:\n          this.index++;\n      }\n    }\n\n    throw this.createILLEGAL();\n  }\n}\n"],"sourceRoot":"/source/"}