{"version":3,"sources":["sweet.js"],"names":[],"mappings":";;;;;QAegB;QAuBA;QAIA;;AA1ChB;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AAEA;;;;AAEA;;;;AACA;;;;AAEO,SAAS,MAAT,CAAgB,MAAhB,EAAsC;MAAd,gEAAU,kBAAI;;AAC3C,MAAI,SAAS,0BAAW,MAAX,CAAT,CADuC;AAE3C,MAAI,OAAO,OAAO,IAAP,EAAP,CAFuC;AAG3C,MAAI,QAAQ,uBAAW,KAAX,CAAR,CAHuC;AAI3C,MAAI,WAAW,0BAAX,CAJuC;AAK3C,MAAI,WAAW,uBAAa;AAC1B,SAAK,mBAAL;AACA,WAAO,mBAAP;AACA,cAAU,QAAV;AACA,SAAK,QAAQ,GAAR;AACL,aAAS,sBAAT;AACA,kBAAc,CAAC,KAAD,CAAd;AACA,eAAW,QAAQ,SAAR,GAAoB,QAAQ,SAAR,GAAoB,UAAS,CAAT,EAAY;AAAE,aAAO,EAAC,MAAM,CAAN,EAAR,CAAF;KAAZ;AACnD,oBAAgB,QAAQ,cAAR;AAChB,kBAAc,QAAQ,YAAR;GATD,CAAX,CALuC;AAgB3C,MAAI,SAAS,SAAS,MAAT,CAAgB,KAAK,GAAL,CAAS;WAAK,EAAE,QAAF,CAAW,KAAX,EAAkB,QAAlB;GAAL,CAAzB,CAAT,CAhBuC;AAiB3C,SAAO,oBAAS,QAAT,EAAmB;AACxB,gBAAY,sBAAZ;AACA,WAAO,MAAP;GAFK,CAAP,CAjB2C;CAAtC;;AAuBA,SAAS,KAAT,CAAe,MAAf,EAAqC;MAAd,gEAAU,kBAAI;;AAC1C,SAAO,4BAAO,4BAAP,EAA2B,OAAO,MAAP,EAAe,OAAf,CAA3B,CAAP,CAD0C;CAArC;;AAIA,SAAS,OAAT,CAAiB,MAAjB,EAAyB,GAAzB,EAA8B;AACnC,MAAI,MAAM,MAAM,MAAN,EAAc,GAAd,CAAN,CAD+B;AAEnC,MAAI,MAAM,4BAAQ,GAAR,CAAN,CAF+B;AAGnC,SAAO,IAAI,SAAJ,GAAgB,IAAI,SAAJ,CAAc,GAAd,EAAmB;AACxC,aAAS,CAAC,QAAD,CAAT;GADqB,CAAhB,GAEF,EAAE,MAAM,GAAN,EAFA,CAH4B;CAA9B","file":"sweet.js","sourcesContent":["import Reader from \"./shift-reader\";\nimport Expander from \"./expander\";\nimport { List } from \"immutable\";\nimport Syntax from \"./syntax\";\nimport Env from \"./env\";\nimport reduce from \"shift-reducer\";\nimport ParseReducer from \"./parse-reducer\";\nimport codegen from \"shift-codegen\";\nimport { Scope, freshScope } from \"./scope\";\n\nimport BindingMap from \"./binding-map.js\";\n\nimport Term from \"./terms\";\nimport { Modules } from './modules';\n\nexport function expand(source, options = {}) {\n  let reader = new Reader(source);\n  let stxl = reader.read();\n  let scope = freshScope('top');\n  let bindings = new BindingMap();\n  let expander = new Expander({\n    env: new Env(),\n    store: new Env(),\n    bindings: bindings,\n    cwd: options.cwd,\n    modules: new Modules(),\n    currentScope: [scope],\n    transform: options.transform ? options.transform : function(x) { return {code: x}; },\n    moduleResolver: options.moduleResolver,\n    moduleLoader: options.moduleLoader\n  });\n  let exStxl = expander.expand(stxl.map(s => s.addScope(scope, bindings)));\n  return new Term(\"Module\", {\n    directives: List(),\n    items: exStxl\n  });\n}\n\nexport function parse(source, options = {}) {\n  return reduce(new ParseReducer(), expand(source, options));\n}\n\nexport function compile(source, opt) {\n  let ast = parse(source, opt);\n  let gen = codegen(ast);\n  return opt.transform ? opt.transform(gen, {\n    presets: ['es2015']\n  }) : { code: gen };\n}\n"],"sourceRoot":"/source/"}