{"version":3,"sources":["enforester.js"],"names":[],"mappings":"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","file":"enforester.js","sourcesContent":["import Term from \"./terms\";\n\nimport {\n  FunctionDeclTransform,\n  VariableDeclTransform,\n  NewTransform,\n  LetDeclTransform,\n  ConstDeclTransform,\n  SyntaxDeclTransform,\n  SyntaxrecDeclTransform,\n  SyntaxQuoteTransform,\n  ReturnStatementTransform,\n  WhileTransform,\n  IfTransform,\n  ForTransform,\n  SwitchTransform,\n  BreakTransform,\n  ContinueTransform,\n  DoTransform,\n  DebuggerTransform,\n  WithTransform,\n  TryTransform,\n  ThrowTransform,\n  CompiletimeTransform\n} from \"./transforms\";\nimport { List } from \"immutable\";\nimport { expect, assert } from \"./errors\";\nimport {\n  isOperator,\n  isUnaryOperator,\n  getOperatorAssoc,\n  getOperatorPrec,\n  operatorLt\n} from \"./operators\";\nimport Syntax from \"./syntax\";\n\nimport { freshScope } from \"./scope\";\nimport { sanitizeReplacementValues } from './load-syntax';\n\nimport MacroContext from \"./macro-context\";\n\nconst EXPR_LOOP_OPERATOR = {};\nconst EXPR_LOOP_NO_CHANGE = {};\nconst EXPR_LOOP_EXPANSION = {};\n\nexport class Enforester {\n  constructor(stxl, prev, context) {\n    this.done = false;\n    assert(List.isList(stxl), \"expecting a list of terms to enforest\");\n    assert(List.isList(prev), \"expecting a list of terms to enforest\");\n    assert(context, \"expecting a context to enforest\");\n    this.term = null;\n\n    this.rest = stxl;\n    this.prev = prev;\n\n    this.context = context;\n  }\n\n  peek(n = 0) {\n    return this.rest.get(n);\n  }\n\n  advance() {\n    let ret = this.rest.first();\n    this.rest = this.rest.rest();\n    return ret;\n  }\n\n  /*\n   enforest works over:\n   prev - a list of the previously enforest Terms\n   term - the current term being enforested (initially null)\n   rest - remaining Terms to enforest\n   */\n  enforest(type = \"Module\") {\n    // initialize the term\n    this.term = null;\n\n    if (this.rest.size === 0) {\n      this.done = true;\n      return this.term;\n    }\n\n    if (this.isEOF(this.peek())) {\n      this.term = new Term(\"EOF\", {});\n      this.advance();\n      return this.term;\n    }\n\n    let result;\n    if (type === \"expression\") {\n      result = this.enforestExpressionLoop();\n    } else {\n      result = this.enforestModule();\n    }\n\n    if (this.rest.size === 0) {\n      this.done = true;\n    }\n    return result;\n  }\n\n  enforestModule() {\n    return this.enforestBody();\n  }\n\n  enforestBody() {\n    return this.enforestModuleItem();\n  }\n\n  enforestModuleItem() {\n    let lookahead = this.peek();\n    if (this.isKeyword(lookahead, 'import')) {\n      this.advance();\n      return this.enforestImportDeclaration();\n    } else if (this.isKeyword(lookahead, 'export')) {\n      this.advance();\n      return this.enforestExportDeclaration();\n    }\n    return this.enforestStatement();\n  }\n\n  enforestExportDeclaration() {\n    let lookahead = this.peek();\n    if (this.isPunctuator(lookahead, '*')) {\n      this.advance();\n      let moduleSpecifier = this.enforestFromClause();\n      return new Term('ExportAllFrom', { moduleSpecifier });\n    } else if (this.isBraces(lookahead)) {\n      let namedExports = this.enforestExportClause();\n      let moduleSpecifier = null;\n      if (this.isIdentifier(this.peek(), 'from')) {\n        moduleSpecifier = this.enforestFromClause();\n      }\n      return new Term('ExportFrom', { namedExports, moduleSpecifier });\n    } else if (this.isKeyword(lookahead, 'class')) {\n      return new Term('Export', {\n        declaration: this.enforestClass({ isExpr: false })\n      });\n    } else if (this.isFnDeclTransform(lookahead)) {\n      return new Term('Export', {\n        declaration: this.enforestFunction({isExpr: false, inDefault: false})\n      });\n    } else if (this.isKeyword(lookahead, 'default')) {\n      this.advance();\n      if (this.isFnDeclTransform(this.peek())) {\n        return new Term('ExportDefault', {\n          body: this.enforestFunction({isExpr: false, inDefault: true})\n        });\n      } else if (this.isKeyword(this.peek(), 'class')) {\n        return new Term('ExportDefault', {\n          body: this.enforestClass({isExpr: false, inDefault: true})\n        });\n      } else {\n        let body = this.enforestExpressionLoop();\n        this.consumeSemicolon();\n        return new Term('ExportDefault', { body });\n      }\n    } else if (this.isVarDeclTransform(lookahead) ||\n        this.isLetDeclTransform(lookahead) ||\n        this.isConstDeclTransform(lookahead) ||\n        this.isSyntaxrecDeclTransform(lookahead) ||\n        this.isSyntaxDeclTransform(lookahead)) {\n      return new Term('Export', {\n        declaration: this.enforestVariableDeclaration()\n      });\n    }\n    throw this.createError(lookahead, 'unexpected syntax');\n  }\n\n  enforestExportClause() {\n    let enf = new Enforester(this.matchCurlies(), List(), this.context);\n    let result = [];\n    while (enf.rest.size !== 0) {\n      result.push(enf.enforestExportSpecifier());\n      enf.consumeComma();\n    }\n    return List(result);\n  }\n\n  enforestExportSpecifier() {\n    let name = this.enforestIdentifier();\n    if (this.isIdentifier(this.peek(), 'as')) {\n      this.advance();\n      let exportedName = this.enforestIdentifier();\n      return new Term('ExportSpecifier', { name, exportedName });\n    }\n    return new Term('ExportSpecifier', {\n      name: null,\n      exportedName: name\n    });\n  }\n\n  enforestImportDeclaration() {\n    let lookahead = this.peek();\n    let defaultBinding = null;\n    let namedImports = List();\n    let forSyntax = false;\n\n    if (this.isStringLiteral(lookahead)) {\n      let moduleSpecifier = this.advance();\n      this.consumeSemicolon();\n      return new Term('Import', {\n        defaultBinding, namedImports, moduleSpecifier\n      });\n    }\n\n    if (this.isIdentifier(lookahead) || this.isKeyword(lookahead)) {\n      defaultBinding = this.enforestBindingIdentifier();\n      if (!this.isPunctuator(this.peek(), ',')) {\n        let moduleSpecifier = this.enforestFromClause();\n        if (this.isKeyword(this.peek(), 'for') && this.isIdentifier(this.peek(1), 'syntax')) {\n          this.advance();\n          this.advance();\n          forSyntax = true;\n        }\n\n        return new Term('Import', {\n          defaultBinding, moduleSpecifier,\n          namedImports: List(),\n          forSyntax\n        });\n      }\n    }\n    this.consumeComma();\n    lookahead = this.peek();\n    if (this.isBraces(lookahead)) {\n      let imports = this.enforestNamedImports();\n      let fromClause = this.enforestFromClause();\n      if (this.isKeyword(this.peek(), 'for') && this.isIdentifier(this.peek(1), 'syntax')) {\n        this.advance();\n        this.advance();\n        forSyntax = true;\n      }\n\n      return new Term(\"Import\", {\n        defaultBinding,\n        forSyntax,\n        namedImports: imports,\n        moduleSpecifier: fromClause\n\n      });\n    } else if (this.isPunctuator(lookahead, '*')) {\n      let namespaceBinding = this.enforestNamespaceBinding();\n      let moduleSpecifier = this.enforestFromClause();\n      if (this.isKeyword(this.peek(), 'for') && this.isIdentifier(this.peek(1), 'syntax')) {\n        this.advance();\n        this.advance();\n        forSyntax = true;\n      }\n      return new Term('ImportNamespace', {\n        defaultBinding, forSyntax, namespaceBinding, moduleSpecifier\n      });\n    }\n    throw this.createError(lookahead, 'unexpected syntax');\n  }\n\n  enforestNamespaceBinding() {\n    this.matchPunctuator('*');\n    this.matchIdentifier('as');\n    return this.enforestBindingIdentifier();\n  }\n\n  enforestNamedImports() {\n    let enf = new Enforester(this.matchCurlies(), List(), this.context);\n    let result = [];\n    while (enf.rest.size !== 0) {\n      result.push(enf.enforestImportSpecifiers());\n      enf.consumeComma();\n    }\n    return List(result);\n  }\n\n  enforestImportSpecifiers() {\n    let lookahead = this.peek();\n    let name;\n    if (this.isIdentifier(lookahead) || this.isKeyword(lookahead)) {\n      name = this.advance();\n      if (!this.isIdentifier(this.peek(), 'as')) {\n        return new Term('ImportSpecifier', {\n          name: null,\n          binding: new Term('BindingIdentifier', {\n            name: name\n          })\n        });\n      } else {\n        this.matchIdentifier('as');\n      }\n    } else {\n      throw this.createError(lookahead, 'unexpected token in import specifier');\n    }\n    return new Term('ImportSpecifier', {\n      name, binding: this.enforestBindingIdentifier()\n    });\n  }\n\n  enforestFromClause() {\n    this.matchIdentifier('from');\n    let lookahead = this.matchStringLiteral();\n    this.consumeSemicolon();\n    return lookahead;\n  }\n\n  enforestStatementListItem() {\n    let lookahead = this.peek();\n\n    if (this.isFnDeclTransform(lookahead)) {\n      return this.enforestFunctionDeclaration({ isExpr: false });\n    } else if (this.isKeyword(lookahead, 'class')) {\n      return this.enforestClass({ isExpr: false });\n    } else {\n      return this.enforestStatement();\n    }\n  }\n\n  enforestStatement() {\n    let lookahead = this.peek();\n\n    if (this.term === null && this.isCompiletimeTransform(lookahead)) {\n      this.rest = this.expandMacro().concat(this.rest);\n      lookahead = this.peek();\n    }\n\n    if (this.term === null && this.isBraces(lookahead)) {\n      return this.enforestBlockStatement();\n    }\n\n    if (this.term === null && this.isWhileTransform(lookahead)) {\n      return this.enforestWhileStatement();\n    }\n\n    if (this.term === null && this.isIfTransform(lookahead)) {\n      return this.enforestIfStatement();\n    }\n    if (this.term === null && this.isForTransform(lookahead)) {\n      return this.enforestForStatement();\n    }\n    if (this.term === null && this.isSwitchTransform(lookahead)) {\n      return this.enforestSwitchStatement();\n    }\n    if (this.term === null && this.isBreakTransform(lookahead)) {\n      return this.enforestBreakStatement();\n    }\n    if (this.term === null && this.isContinueTransform(lookahead)) {\n      return this.enforestContinueStatement();\n    }\n    if (this.term === null && this.isDoTransform(lookahead)) {\n      return this.enforestDoStatement();\n    }\n    if (this.term === null && this.isDebuggerTransform(lookahead)) {\n      return this.enforestDebuggerStatement();\n    }\n    if (this.term === null && this.isWithTransform(lookahead)) {\n      return this.enforestWithStatement();\n    }\n    if (this.term === null && this.isTryTransform(lookahead)) {\n      return this.enforestTryStatement();\n    }\n    if (this.term === null && this.isThrowTransform(lookahead)) {\n      return this.enforestThrowStatement();\n    }\n\n    // TODO: put somewhere else\n    if (this.term === null && this.isKeyword(lookahead, \"class\")) {\n      return this.enforestClass({isExpr: false});\n    }\n\n    if (this.term === null && this.isFnDeclTransform(lookahead)) {\n      return this.enforestFunctionDeclaration();\n    }\n\n    if (this.term === null && this.isIdentifier(lookahead) &&\n        this.isPunctuator(this.peek(1), ':')) {\n      return this.enforestLabeledStatement();\n    }\n\n    if (this.term === null &&\n        (this.isVarDeclTransform(lookahead) ||\n         this.isLetDeclTransform(lookahead) ||\n         this.isConstDeclTransform(lookahead) ||\n         this.isSyntaxrecDeclTransform(lookahead) ||\n         this.isSyntaxDeclTransform(lookahead))) {\n      let stmt = new Term('VariableDeclarationStatement', {\n        declaration: this.enforestVariableDeclaration()\n      });\n      this.consumeSemicolon();\n      return stmt;\n    }\n\n    if (this.term === null && this.isReturnStmtTransform(lookahead)) {\n      return this.enforestReturnStatement();\n    }\n\n    if (this.term === null && this.isPunctuator(lookahead, \";\")) {\n      this.advance();\n      return new Term(\"EmptyStatement\", {});\n    }\n\n\n    return this.enforestExpressionStatement();\n  }\n\n  enforestLabeledStatement() {\n    let label = this.matchIdentifier();\n    let punc = this.matchPunctuator(':');\n    let stmt = this.enforestStatement();\n\n    return new Term('LabeledStatement', {\n      label: label,\n      body: stmt\n    });\n  }\n\n  enforestBreakStatement() {\n    this.matchKeyword('break');\n    let lookahead = this.peek();\n    let label = null;\n    if (this.rest.size === 0 || this.isPunctuator(lookahead, ';')) {\n      this.consumeSemicolon();\n      return new Term('BreakStatement', { label });\n    }\n    if (this.isIdentifier(lookahead) || this.isKeyword(lookahead, 'yield') || this.isKeyword(lookahead, 'let')) {\n      label = this.enforestIdentifier();\n    }\n    this.consumeSemicolon();\n\n    return new Term('BreakStatement', { label });\n  }\n\n  enforestTryStatement() {\n    this.matchKeyword('try');\n    let body = this.enforestBlock();\n    if (this.isKeyword(this.peek(), 'catch')) {\n      let catchClause = this.enforestCatchClause();\n      if (this.isKeyword(this.peek(), 'finally')) {\n        this.advance();\n        let finalizer = this.enforestBlock();\n        return new Term('TryFinallyStatement', {\n          body, catchClause, finalizer\n        });\n      }\n      return new Term('TryCatchStatement', { body, catchClause });\n    }\n    if (this.isKeyword(this.peek(), 'finally')) {\n      this.advance();\n      let finalizer = this.enforestBlock();\n      return new Term('TryFinallyStatement', { body, catchClause: null, finalizer });\n    }\n    throw this.createError(this.peek(), 'try with no catch or finally');\n  }\n\n  enforestCatchClause() {\n    this.matchKeyword('catch');\n    let bindingParens = this.matchParens();\n    let enf = new Enforester(bindingParens, List(), this.context);\n    let binding = enf.enforestBindingTarget();\n    let body = this.enforestBlock();\n    return new Term('CatchClause', { binding, body });\n  }\n\n  enforestThrowStatement() {\n    this.matchKeyword('throw');\n    let expression = this.enforestExpression();\n    this.consumeSemicolon();\n    return new Term('ThrowStatement', { expression });\n  }\n\n  enforestWithStatement() {\n    this.matchKeyword('with');\n    let objParens = this.matchParens();\n    let enf = new Enforester(objParens, List(), this.context);\n    let object = enf.enforestExpression();\n    let body = this.enforestStatement();\n    return new Term('WithStatement', { object, body });\n  }\n\n  enforestDebuggerStatement() {\n    this.matchKeyword('debugger');\n\n    return new Term('DebuggerStatement', {});\n  }\n\n  enforestDoStatement() {\n    this.matchKeyword('do');\n    let body = this.enforestStatement();\n    this.matchKeyword('while');\n    let testBody = this.matchParens();\n    let enf = new Enforester(testBody, List(), this.context);\n    let test = enf.enforestExpression();\n    this.consumeSemicolon();\n    return new Term('DoWhileStatement', { body, test });\n  }\n\n  enforestContinueStatement() {\n    let kwd = this.matchKeyword('continue');\n    let lookahead = this.peek();\n    let label = null;\n    if (this.rest.size === 0 || this.isPunctuator(lookahead, ';')) {\n      this.consumeSemicolon();\n      return new Term('ContinueStatement', { label });\n    }\n    if (this.lineNumberEq(kwd, lookahead) &&\n        (this.isIdentifier(lookahead) ||\n         this.isKeyword(lookahead, 'yield') ||\n         this.isKeyword(lookahead, 'let'))) {\n      label = this.enforestIdentifier();\n    }\n    this.consumeSemicolon();\n\n    return new Term('ContinueStatement', { label });\n  }\n\n  enforestSwitchStatement() {\n    this.matchKeyword('switch');\n    let cond = this.matchParens();\n    let enf = new Enforester(cond, List(), this.context);\n    let discriminant = enf.enforestExpression();\n    let body = this.matchCurlies();\n\n    if (body.size === 0) {\n      return new Term('SwitchStatement', {\n        discriminant: discriminant,\n        cases: List()\n      });\n    }\n    enf = new Enforester(body, List(), this.context);\n    let cases = enf.enforestSwitchCases();\n    let lookahead = enf.peek();\n    if (enf.isKeyword(lookahead, 'default')) {\n      let defaultCase = enf.enforestSwitchDefault();\n      let postDefaultCases = enf.enforestSwitchCases();\n      return new Term('SwitchStatementWithDefault', {\n        discriminant,\n        preDefaultCases: cases,\n        defaultCase,\n        postDefaultCases\n      });\n    }\n    return new Term('SwitchStatement', {  discriminant, cases });\n  }\n\n  enforestSwitchCases() {\n    let cases = [];\n    while (!(this.rest.size === 0 || this.isKeyword(this.peek(), 'default'))) {\n      cases.push(this.enforestSwitchCase());\n    }\n    return List(cases);\n  }\n\n  enforestSwitchCase() {\n    this.matchKeyword('case');\n    return new Term('SwitchCase', {\n      test: this.enforestExpression(),\n      consequent: this.enforestSwitchCaseBody()\n    });\n  }\n\n  enforestSwitchCaseBody() {\n    this.matchPunctuator(':');\n    return this.enforestStatementListInSwitchCaseBody();\n  }\n\n  enforestStatementListInSwitchCaseBody() {\n    let result = [];\n    while(!(this.rest.size === 0 || this.isKeyword(this.peek(), 'default') || this.isKeyword(this.peek(), 'case'))) {\n      result.push(this.enforestStatementListItem());\n    }\n    return List(result);\n  }\n\n  enforestSwitchDefault() {\n    this.matchKeyword('default');\n    return new Term('SwitchDefault', {\n      consequent: this.enforestSwitchCaseBody()\n    });\n  }\n\n  enforestForStatement() {\n    this.matchKeyword('for');\n    let cond = this.matchParens();\n    let enf = new Enforester(cond, List(), this.context);\n    let lookahead, test, init, right, type, left, update;\n\n    // case where init is null\n    if (enf.isPunctuator(enf.peek(), ';')) {\n      enf.advance();\n      if (!enf.isPunctuator(enf.peek(), ';')) {\n        test = enf.enforestExpression();\n      }\n      enf.matchPunctuator(';');\n      if (enf.rest.size !== 0) {\n        right = enf.enforestExpression();\n      }\n      return new Term('ForStatement', {\n        init: null,\n        test: test,\n        update: right,\n        body: this.enforestStatement()\n      });\n    // case where init is not null\n    } else {\n      // testing\n      lookahead = enf.peek();\n      if (enf.isVarDeclTransform(lookahead) ||\n          enf.isLetDeclTransform(lookahead) ||\n          enf.isConstDeclTransform(lookahead)) {\n        init = enf.enforestVariableDeclaration();\n        lookahead = enf.peek();\n        if (this.isKeyword(lookahead, 'in') || this.isIdentifier(lookahead, 'of')) {\n          if (this.isKeyword(lookahead, 'in')) {\n            enf.advance();\n            right = enf.enforestExpression();\n            type = 'ForInStatement';\n          } else if (this.isIdentifier(lookahead, 'of')) {\n            enf.advance();\n            right = enf.enforestExpression();\n            type = 'ForOfStatement';\n          }\n          return new Term(type, {\n            left: init, right, body: this.enforestStatement()\n          });\n        }\n        enf.matchPunctuator(';');\n        if (enf.isPunctuator(enf.peek(), ';')) {\n          enf.advance();\n          test = null;\n        } else {\n          test = enf.enforestExpression();\n          enf.matchPunctuator(';');\n        }\n        update = enf.enforestExpression();\n      } else {\n        if (this.isKeyword(enf.peek(1), 'in') || this.isIdentifier(enf.peek(1), 'of')) {\n          left = enf.enforestBindingIdentifier();\n          let kind = enf.advance();\n          if (this.isKeyword(kind, 'in')) {\n            type = 'ForInStatement';\n          } else {\n            type = 'ForOfStatement';\n          }\n          right = enf.enforestExpression();\n          return new Term(type, {\n            left: left, right, body: this.enforestStatement()\n          });\n        }\n        init = enf.enforestExpression();\n        enf.matchPunctuator(';');\n        if (enf.isPunctuator(enf.peek(), ';')) {\n          enf.advance();\n          test = null;\n        } else {\n          test = enf.enforestExpression();\n          enf.matchPunctuator(';');\n        }\n        update = enf.enforestExpression();\n      }\n      return new Term('ForStatement', { init, test, update, body: this.enforestStatement() });\n    }\n  }\n\n  enforestIfStatement() {\n    this.matchKeyword('if');\n    let cond = this.matchParens();\n    let enf = new Enforester(cond, List(), this.context);\n    let lookahead = enf.peek();\n    let test = enf.enforestExpression();\n    if (test === null) {\n      throw enf.createError(lookahead, 'expecting an expression');\n    }\n    let consequent = this.enforestStatement();\n    let alternate = null;\n    if (this.isKeyword(this.peek(), 'else')) {\n      this.advance();\n      alternate = this.enforestStatement();\n    }\n    return new Term('IfStatement', { test, consequent, alternate });\n  }\n\n  enforestWhileStatement() {\n    this.matchKeyword('while');\n    let cond = this.matchParens();\n    let enf = new Enforester(cond, List(), this.context);\n    let lookahead = enf.peek();\n    let test = enf.enforestExpression();\n    if (test === null) {\n      throw enf.createError(lookahead, 'expecting an expression');\n    }\n    let body = this.enforestStatement();\n\n    return new Term('WhileStatement', { test, body });\n  }\n\n  enforestBlockStatement() {\n    return new Term('BlockStatement', {\n      block: this.enforestBlock()\n    });\n  }\n\n  enforestBlock() {\n    let b = this.matchCurlies();\n    let body = [];\n    let enf = new Enforester(b, List(), this.context);\n\n    while (enf.rest.size !== 0) {\n      let lookahead = enf.peek();\n      let stmt = enf.enforestStatement();\n      if (stmt == null) {\n        throw enf.createError(lookahead, 'not a statement');\n      }\n      body.push(stmt);\n    }\n\n    return new Term('Block', {\n      statements: List(body)\n    });\n  }\n\n  enforestClass({ isExpr, inDefault }) {\n    let kw = this.advance();\n    let name = null, supr = null;\n    let type = isExpr ? 'ClassExpression' : 'ClassDeclaration';\n\n    if (this.isIdentifier(this.peek())) {\n      name = this.enforestBindingIdentifier();\n    } else if (!isExpr) {\n      if (inDefault) {\n        name = new Term('BindingIdentifier', {\n          name: Syntax.fromIdentifier('_default', kw)\n        });\n      } else {\n        throw this.createError(this.peek(), 'unexpected syntax');\n      }\n    }\n\n    if (this.isKeyword(this.peek(), 'extends')) {\n      this.advance();\n      supr = this.enforestExpressionLoop();\n    }\n\n    let elements = [];\n    let enf = new Enforester(this.matchCurlies(), List(), this.context);\n    while (enf.rest.size !== 0) {\n      if (enf.isPunctuator(enf.peek(), ';')) {\n        enf.advance();\n        continue;\n      }\n\n      let isStatic = false;\n      let {methodOrKey, kind} = enf.enforestMethodDefinition();\n      if (kind === 'identifier' && methodOrKey.value.val() === 'static') {\n        isStatic = true;\n        ({methodOrKey, kind} = enf.enforestMethodDefinition());\n      }\n      if (kind === 'method') {\n        elements.push(new Term('ClassElement', {isStatic, method: methodOrKey}));\n      } else {\n        throw this.createError(enf.peek(), \"Only methods are allowed in classes\");\n      }\n    }\n\n    return new Term(type, {\n      name, super: supr,\n      elements: List(elements)\n    });\n  }\n\n  enforestBindingTarget() {\n    let lookahead = this.peek();\n    if (this.isIdentifier(lookahead) || this.isKeyword(lookahead)) {\n      return this.enforestBindingIdentifier();\n    } else if (this.isBrackets(lookahead)) {\n      return this.enforestArrayBinding();\n    } else if (this.isBraces(lookahead)) {\n      return this.enforestObjectBinding();\n    }\n    assert(false, 'not implemented yet');\n  }\n\n  enforestObjectBinding() {\n    let enf = new Enforester(this.matchCurlies(), List(), this.context);\n    let properties = [];\n    while (enf.rest.size !== 0) {\n      properties.push(enf.enforestBindingProperty());\n      enf.consumeComma();\n    }\n\n    return new Term('ObjectBinding', {\n      properties: List(properties)\n    });\n  }\n\n  enforestBindingProperty() {\n    let lookahead = this.peek();\n    let {name, binding} = this.enforestPropertyName();\n    if (this.isIdentifier(lookahead) || this.isKeyword(lookahead, 'let') || this.isKeyword(lookahead, 'yield')) {\n      if (!this.isPunctuator(this.peek(), ':')) {\n        let defaultValue = null;\n        if (this.isAssign(this.peek())) {\n          this.advance();\n          let expr = this.enforestExpressionLoop();\n          defaultValue = expr;\n        }\n        return new Term('BindingPropertyIdentifier', {\n          binding, init: defaultValue\n        });\n      }\n    }\n    this.matchPunctuator(':');\n    binding = this.enforestBindingElement();\n    return new Term('BindingPropertyProperty', {\n      name, binding\n    });\n  }\n\n  enforestArrayBinding() {\n    let bracket = this.matchSquares();\n    let enf = new Enforester(bracket, List(), this.context);\n    let elements = [], restElement = null;\n    while (enf.rest.size !== 0) {\n      let el;\n      if (enf.isPunctuator(enf.peek(), ',')) {\n        enf.consumeComma();\n        el = null;\n      } else {\n        if (enf.isPunctuator(enf.peek(), '...')) {\n          enf.advance();\n          restElement = enf.enforestBindingTarget();\n          break;\n        } else {\n          el = enf.enforestBindingElement();\n        }\n        enf.consumeComma();\n      }\n      elements.push(el);\n    }\n    return new Term('ArrayBinding', {\n      elements: List(elements),\n      restElement\n    });\n  }\n\n  enforestBindingElement() {\n    let binding = this.enforestBindingTarget();\n\n    if (this.isAssign(this.peek())) {\n      this.advance();\n      let init = this.enforestExpressionLoop();\n      binding = new Term('BindingWithDefault', { binding, init });\n    }\n    return binding;\n  }\n\n  enforestBindingIdentifier() {\n    return new Term(\"BindingIdentifier\", {\n      name: this.enforestIdentifier()\n    });\n  }\n\n  enforestIdentifier() {\n    let lookahead = this.peek();\n    if (this.isIdentifier(lookahead) || this.isKeyword(lookahead)) {\n      return this.advance();\n    }\n    throw this.createError(lookahead, \"expecting an identifier\");\n  }\n\n\n  enforestReturnStatement() {\n    let kw = this.advance();\n    let lookahead = this.peek();\n\n    // short circuit for the empty expression case\n    if (this.rest.size === 0 ||\n        (lookahead && !this.lineNumberEq(kw, lookahead))) {\n      return new Term(\"ReturnStatement\", {\n        expression: null\n      });\n    }\n\n    let term = null;\n    if (!this.isPunctuator(lookahead, ';')) {\n      term = this.enforestExpression();\n      expect(term != null, \"Expecting an expression to follow return keyword\", lookahead, this.rest);\n    }\n\n    this.consumeSemicolon();\n    return new Term(\"ReturnStatement\", {\n      expression: term\n    });\n  }\n\n  enforestVariableDeclaration() {\n    let kind;\n    let lookahead = this.advance();\n    let kindSyn = lookahead;\n\n    if (kindSyn &&\n        this.context.env.get(kindSyn.resolve()) === VariableDeclTransform) {\n      kind = \"var\";\n    } else if (kindSyn &&\n               this.context.env.get(kindSyn.resolve()) === LetDeclTransform) {\n      kind = \"let\";\n    } else if (kindSyn &&\n               this.context.env.get(kindSyn.resolve()) === ConstDeclTransform) {\n      kind = \"const\";\n    } else if (kindSyn &&\n               this.context.env.get(kindSyn.resolve()) === SyntaxDeclTransform) {\n      kind = \"syntax\";\n    } else if (kindSyn &&\n               this.context.env.get(kindSyn.resolve()) === SyntaxrecDeclTransform) {\n      kind = \"syntaxrec\";\n    }\n\n    let decls = List();\n\n    while (true) {\n      let term = this.enforestVariableDeclarator();\n      let lookahead = this.peek();\n      decls = decls.concat(term);\n\n      if (this.isPunctuator(lookahead, \",\")) {\n        this.advance();\n      } else {\n        break;\n      }\n    }\n\n    return new Term('VariableDeclaration', {\n      kind: kind,\n      declarators: decls\n    });\n  }\n\n  enforestVariableDeclarator() {\n    let id = this.enforestBindingTarget();\n    let lookahead = this.peek();\n\n    let init, rest;\n    if (this.isPunctuator(lookahead, '=')) {\n      this.advance();\n      let enf = new Enforester(this.rest, List(), this.context);\n      init = enf.enforest(\"expression\");\n      this.rest = enf.rest;\n    } else {\n      init = null;\n    }\n    return new Term(\"VariableDeclarator\", {\n      binding: id,\n      init: init\n    });\n  }\n\n  enforestExpressionStatement() {\n    let start = this.rest.get(0);\n    let expr = this.enforestExpression();\n    if (expr === null) {\n      throw this.createError(start, \"not a valid expression\");\n    }\n    this.consumeSemicolon();\n\n    return new Term(\"ExpressionStatement\", {\n      expression: expr\n    });\n  }\n\n  enforestExpression() {\n    let left = this.enforestExpressionLoop();\n    let lookahead = this.peek();\n    if (this.isPunctuator(lookahead, ',')) {\n      while (this.rest.size !== 0) {\n        if (!this.isPunctuator(this.peek(), ',')) {\n          break;\n        }\n        let operator = this.advance();\n        let right = this.enforestExpressionLoop();\n        left = new Term('BinaryExpression', {left, operator, right});\n      }\n    }\n    this.term = null;\n    return left;\n  }\n\n  enforestExpressionLoop() {\n    this.term = null;\n    this.opCtx = {\n      prec: 0,\n      combine: (x) => x,\n      stack: List()\n    };\n\n    do {\n      let term = this.enforestAssignmentExpression();\n      // no change means we've done as much enforesting as possible\n      // if nothing changed, maybe we just need to pop the expr stack\n      if (term === EXPR_LOOP_NO_CHANGE && this.opCtx.stack.size > 0) {\n        this.term = this.opCtx.combine(this.term);\n        let {prec, combine} = this.opCtx.stack.last();\n        this.opCtx.prec = prec;\n        this.opCtx.combine = combine;\n        this.opCtx.stack = this.opCtx.stack.pop();\n      } else if (term === EXPR_LOOP_NO_CHANGE) {\n        break;\n      } else if (term === EXPR_LOOP_OPERATOR || term === EXPR_LOOP_EXPANSION) {\n        // operator means an opCtx was pushed on the stack\n        this.term = null;\n      } else {\n        this.term = term;\n      }\n    } while (true);  // get a fixpoint\n    return this.term;\n  }\n\n  enforestAssignmentExpression() {\n    let lookahead = this.peek();\n\n    if (this.term === null && this.isTerm(lookahead)) {\n      // TODO: check that this is actually an expression\n      return this.advance();\n    }\n\n    if (this.term === null && this.isCompiletimeTransform(lookahead)) {\n      let result = this.expandMacro();\n      this.rest = result.concat(this.rest);\n      return EXPR_LOOP_EXPANSION;\n    }\n\n    if (this.term === null && this.isKeyword(lookahead, 'yield')) {\n      return this.enforestYieldExpression();\n    }\n\n    if (this.term === null && this.isKeyword(lookahead, 'class')) {\n      return this.enforestClass({isExpr: true});\n    }\n    if (this.term === null && this.isKeyword(lookahead, 'super')) {\n      this.advance();\n      return new Term('Super', {});\n    }\n    if (this.term === null &&\n      (this.isIdentifier(lookahead) || this.isParens(lookahead)) &&\n       this.isPunctuator(this.peek(1), '=>') &&\n       this.lineNumberEq(lookahead, this.peek(1))) {\n      return this.enforestArrowExpression();\n    }\n\n\n\n    if (this.term === null && this.isSyntaxTemplate(lookahead)) {\n      return this.enforestSyntaxTemplate();\n    }\n    // syntaxQuote ` ... `\n    if (this.term === null && this.isSyntaxQuoteTransform(lookahead)) {\n      return this.enforestSyntaxQuote();\n    }\n\n    if (this.term === null && this.isNewTransform(lookahead)) {\n      return this.enforestNewExpression();\n    }\n\n    // $x:ThisExpression\n    if (this.term === null && this.isKeyword(lookahead, \"this\")) {\n      return new Term(\"ThisExpression\", {\n        stx: this.advance()\n      });\n    }\n    // $x:ident\n    if (this.term === null && (this.isIdentifier(lookahead) || this.isKeyword(lookahead, 'let') || this.isKeyword(lookahead, 'yield'))) {\n      return new Term(\"IdentifierExpression\", {\n        name: this.advance()\n      });\n    }\n    if (this.term === null && this.isNumericLiteral(lookahead)) {\n      let num = this.advance();\n      if (num.val() === 1 / 0) {\n        return new Term('LiteralInfinityExpression', {});\n      }\n      return new Term(\"LiteralNumericExpression\", {\n        value: num\n      });\n    }\n    if (this.term === null && this.isStringLiteral(lookahead)) {\n      return new Term(\"LiteralStringExpression\", {\n        value: this.advance()\n      });\n    }\n    if (this.term === null && this.isTemplate(lookahead)) {\n      return new Term('TemplateExpression', {\n        tag: null,\n        elements: this.enforestTemplateElements()\n      });\n    }\n    if (this.term === null && this.isBooleanLiteral(lookahead)) {\n      return new Term(\"LiteralBooleanExpression\", {\n        value: this.advance()\n      });\n    }\n    if (this.term === null && this.isNullLiteral(lookahead)) {\n      this.advance();\n      return new Term(\"LiteralNullExpression\", {});\n    }\n    if (this.term === null && this.isRegularExpression(lookahead)) {\n      let reStx = this.advance();\n\n      let lastSlash = reStx.token.value.lastIndexOf(\"/\");\n      let pattern = reStx.token.value.slice(1, lastSlash);\n      let flags = reStx.token.value.slice(lastSlash + 1);\n      return new Term(\"LiteralRegExpExpression\", {\n        pattern, flags\n      });\n    }\n    // ($x:expr)\n    if (this.term === null && this.isParens(lookahead)) {\n      return new Term(\"ParenthesizedExpression\", {\n        inner: this.advance().inner()\n      });\n    }\n    // $x:FunctionExpression\n    if (this.term === null && this.isFnDeclTransform(lookahead)) {\n      return this.enforestFunctionExpression();\n    }\n\n    // { $p:prop (,) ... }\n    if (this.term === null && this.isBraces(lookahead)) {\n      return this.enforestObjectExpression();\n    }\n\n    // [$x:expr (,) ...]\n    if (this.term === null && this.isBrackets(lookahead)) {\n      return this.enforestArrayExpression();\n    }\n\n    // prefix unary\n    if (this.term === null && this.isOperator(lookahead)) {\n      return this.enforestUnaryExpression();\n    }\n\n    // and then check the cases where the term part of p is something...\n\n    // postfix unary\n    if (this.term && this.isUpdateOperator(lookahead)) {\n      return this.enforestUpdateExpression();\n    }\n\n    // $l:expr $op:binaryOperator $r:expr\n    if (this.term && this.isOperator(lookahead)) {\n      return this.enforestBinaryExpression();\n    }\n    // $x:expr . $prop:ident\n    if (this.term && this.isPunctuator(lookahead, \".\") &&\n        (this.isIdentifier(this.peek(1)) || this.isKeyword(this.peek(1)))) {\n      return this.enforestStaticMemberExpression();\n    }\n    // $x:expr [ $b:expr ]\n    if (this.term && this.isBrackets(lookahead)) {\n      return this.enforestComputedMemberExpression();\n    }\n    // $x:expr (...)\n    if (this.term && this.isParens(lookahead)) {\n      let paren = this.advance();\n      return new Term(\"CallExpression\", {\n        callee: this.term,\n        arguments: paren.inner()\n      });\n    }\n    // $x:id `...`\n    if (this.term && this.isTemplate(lookahead)) {\n      return new Term('TemplateExpression', {\n        tag: this.term,\n        elements: this.enforestTemplateElements()\n      });\n    }\n    // $x:expr = $init:expr\n    if (this.term && this.isAssign(lookahead)) {\n      let binding = this.transformDestructuring(this.term);\n      let op = this.advance();\n\n      let enf = new Enforester(this.rest, List(), this.context);\n      let init = enf.enforest(\"expression\");\n      this.rest = enf.rest;\n\n      if (op.val() === '=') {\n        return new Term('AssignmentExpression', {\n          binding,\n          expression: init\n        });\n      } else {\n        return new Term('CompoundAssignmentExpression', {\n          binding,\n          operator: op.val(),\n          expression: init\n        });\n      }\n    }\n\n    if (this.term && this.isPunctuator(lookahead, '?')) {\n      return this.enforestConditionalExpression();\n    }\n\n    return EXPR_LOOP_NO_CHANGE;\n  }\n\n  enforestArgumentList() {\n    let result = [];\n    while (this.rest.size > 0) {\n      let arg;\n      if (this.isPunctuator(this.peek(), '...')) {\n        this.advance();\n        arg = new Term('SpreadElement', {\n          expression: this.enforestExpressionLoop()\n        });\n      } else {\n        arg = this.enforestExpressionLoop();\n      }\n      if (this.rest.size > 0) {\n        this.matchPunctuator(',');\n      }\n      result.push(arg);\n    }\n    return List(result);\n  }\n\n  enforestNewExpression() {\n    this.matchKeyword('new');\n    let callee;\n    if (this.isKeyword(this.peek(), 'new')) {\n      callee = this.enforestNewExpression();\n    } else if (this.isKeyword(this.peek(), 'super')) {\n      callee = this.enforestExpressionLoop();\n    } else if (this.isPunctuator(this.peek(), '.') && this.isIdentifier(this.peek(1), 'target')) {\n      this.advance();\n      this.advance();\n      return new Term('NewTargetExpression', {});\n    } else {\n      callee = new Term('IdentifierExpression', { name : this.enforestIdentifier() });\n    }\n    let args;\n    if (this.isParens(this.peek())) {\n      args = this.matchParens();\n    } else {\n      args = List();\n    }\n    return new Term('NewExpression', {\n      callee,\n      arguments: args\n    });\n  }\n\n  enforestComputedMemberExpression() {\n    let enf = new Enforester(this.matchSquares(), List(), this.context);\n    return new Term('ComputedMemberExpression', {\n      object: this.term,\n      expression: enf.enforestExpression()\n    });\n  }\n\n  transformDestructuring(term) {\n    switch (term.type) {\n      case 'IdentifierExpression':\n        return new Term('BindingIdentifier', {name: term.name});\n\n      case 'ParenthesizedExpression':\n        if (term.inner.size === 1 && this.isIdentifier(term.inner.get(0))) {\n          return new Term('BindingIdentifier', { name: term.inner.get(0)});\n        }\n      case 'DataProperty':\n        return new Term('BindingPropertyProperty', {\n          name: term.name,\n          binding: this.transformDestructuringWithDefault(term.expression)\n        });\n      case 'ShorthandProperty':\n        return new Term('BindingPropertyIdentifier', {\n          binding: new Term('BindingIdentifier', { name: term.name }),\n          init: null\n        });\n      case 'ObjectExpression':\n        return new Term('ObjectBinding', {\n          properties: term.properties.map(t => this.transformDestructuring(t))\n        });\n      case 'ArrayExpression':\n        let last = term.elements.last();\n        if (last != null && last.type === 'SpreadElement') {\n          return new Term('ArrayBinding', {\n            elements: term.elements.slice(0, -1).map(t => t && this.transformDestructuringWithDefault(t)),\n            restElement: this.transformDestructuringWithDefault(last.expression)\n          });\n        } else {\n          return new Term('ArrayBinding', {\n            elements: term.elements.map(t => t && this.transformDestructuringWithDefault(t)),\n            restElement: null\n          });\n        }\n        return new Term('ArrayBinding', {\n          elements: term.elements.map(t => t && this.transformDestructuring(t)),\n          restElement: null\n        });\n      case 'StaticPropertyName':\n        return new Term('BindingIdentifier', {\n          name: term.value\n        });\n      case 'ComputedMemberExpression':\n      case 'StaticMemberExpression':\n      case 'ArrayBinding':\n      case 'BindingIdentifier':\n      case 'BindingPropertyIdentifier':\n      case 'BindingPropertyProperty':\n      case 'BindingWithDefault':\n      case 'ObjectBinding':\n        return term;\n    }\n    assert(false, 'not implemented yet for ' + term.type);\n  }\n\n  transformDestructuringWithDefault(term) {\n    switch (term.type) {\n      case \"AssignmentExpression\":\n        return new Term('BindingWithDefault', {\n          binding: this.transformDestructuring(term.binding),\n          init: term.expression,\n        });\n    }\n    return this.transformDestructuring(term);\n  }\n\n  enforestArrowExpression() {\n    let enf;\n    if (this.isIdentifier(this.peek())) {\n      enf = new Enforester(List.of(this.advance()), List(), this.context);\n    } else {\n      let p = this.matchParens();\n      enf = new Enforester(p, List(), this.context);\n    }\n    let params = enf.enforestFormalParameters();\n    this.matchPunctuator('=>');\n\n    let body;\n    if (this.isBraces(this.peek())) {\n      body = this.matchCurlies();\n    } else {\n      enf = new Enforester(this.rest, List(), this.context);\n      body = enf.enforestExpressionLoop();\n      this.rest = enf.rest;\n    }\n    return new Term('ArrowExpression', { params, body });\n  }\n\n\n  enforestYieldExpression() {\n    let kwd = this.matchKeyword('yield');\n    let lookahead = this.peek();\n\n    if (this.rest.size === 0 || (lookahead && !this.lineNumberEq(kwd, lookahead))) {\n      return new Term('YieldExpression', {\n        expression: null\n      });\n    } else {\n      let isGenerator = false;\n      if (this.isPunctuator(this.peek(), '*')) {\n          isGenerator = true;\n          this.advance();\n      }\n      let expr = this.enforestExpression();\n      let type = isGenerator ? 'YieldGeneratorExpression' : 'YieldExpression';\n      return new Term(type, {\n        expression: expr\n      });\n    }\n  }\n\n  enforestSyntaxTemplate() {\n    return new Term('SyntaxTemplate', {\n      template: this.advance()\n    });\n  }\n\n  enforestSyntaxQuote() {\n    let name = this.advance();\n    return new Term('SyntaxQuote', {\n      name: name,\n      template: new Term('TemplateExpression', {\n        tag: new Term('IdentifierExpression', {\n          name: name\n        }),\n        elements: this.enforestTemplateElements()\n      })\n    });\n  }\n\n  enforestStaticMemberExpression() {\n    let object = this.term;\n    let dot = this.advance();\n    let property = this.advance();\n\n    return new Term(\"StaticMemberExpression\", {\n      object: object,\n      property: property\n    });\n  }\n\n  enforestArrayExpression() {\n    let arr = this.advance();\n\n    let elements = [];\n\n    let enf = new Enforester(arr.inner(), List(), this.context);\n\n    while (enf.rest.size > 0) {\n      let lookahead = enf.peek();\n      if (enf.isPunctuator(lookahead, \",\")) {\n        enf.advance();\n        elements.push(null);\n      } else if (enf.isPunctuator(lookahead, '...')) {\n        enf.advance();\n        let expression = enf.enforestExpressionLoop();\n        if (expression == null) {\n          throw enf.createError(lookahead, 'expecting expression');\n        }\n        elements.push(new Term('SpreadElement', { expression }));\n      } else {\n        let term = enf.enforestExpressionLoop();\n        if (term == null) {\n          throw enf.createError(lookahead, \"expected expression\");\n        }\n        elements.push(term);\n        enf.consumeComma();\n      }\n    }\n\n    return new Term(\"ArrayExpression\", {\n      elements: List(elements)\n    });\n  }\n\n  enforestObjectExpression() {\n    let obj = this.advance();\n\n    let properties = List();\n\n    let enf = new Enforester(obj.inner(), List(), this.context);\n\n    let lastProp = null;\n    while (enf.rest.size > 0) {\n      let prop = enf.enforestPropertyDefinition();\n      enf.consumeComma();\n      properties = properties.concat(prop);\n\n      if (lastProp === prop) {\n        throw enf.createError(prop, \"invalid syntax in object\");\n      }\n      lastProp = prop;\n    }\n\n    return new Term(\"ObjectExpression\", {\n      properties: properties\n    });\n  }\n\n  enforestPropertyDefinition() {\n\n    let {methodOrKey, kind} = this.enforestMethodDefinition();\n\n    switch (kind) {\n      case 'method':\n        return methodOrKey;\n      case 'identifier':\n        if (this.isAssign(this.peek())) {\n          this.advance();\n          let init = this.enforestExpressionLoop();\n          return new Term('BindingPropertyIdentifier', {\n            init, binding: this.transformDestructuring(methodOrKey)\n          });\n        } else if (!this.isPunctuator(this.peek(), ':')) {\n          return new Term('ShorthandProperty', {\n            name: methodOrKey.value\n          });\n        }\n    }\n\n    this.matchPunctuator(':');\n    let expr = this.enforestExpressionLoop();\n\n    return new Term(\"DataProperty\", {\n      name: methodOrKey,\n      expression: expr\n    });\n  }\n\n  enforestMethodDefinition() {\n    let lookahead = this.peek();\n    let isGenerator = false;\n    if (this.isPunctuator(lookahead, '*')) {\n      isGenerator = true;\n      this.advance();\n    }\n\n    if (this.isIdentifier(lookahead, 'get') && this.isPropertyName(this.peek(1))) {\n      this.advance();\n      let {name} = this.enforestPropertyName();\n      this.matchParens();\n      let body = this.matchCurlies();\n      return {\n        methodOrKey: new Term('Getter', { name, body }),\n        kind: 'method'\n      };\n    } else if (this.isIdentifier(lookahead, 'set') && this.isPropertyName(this.peek(1))) {\n      this.advance();\n      let {name} = this.enforestPropertyName();\n      let enf = new Enforester(this.matchParens(), List(), this.context);\n      let param = enf.enforestBindingElement();\n      let body = this.matchCurlies();\n      return {\n        methodOrKey: new Term('Setter', { name, param, body }),\n        kind: 'method'\n      };\n    }\n    let {name} = this.enforestPropertyName();\n    if (this.isParens(this.peek())) {\n      let params = this.matchParens();\n      let enf = new Enforester(params, List(), this.context);\n      let formalParams = enf.enforestFormalParameters();\n\n      let body = this.matchCurlies();\n      return {\n        methodOrKey: new Term('Method', {\n          isGenerator,\n          name, params: formalParams, body\n        }),\n        kind: 'method'\n      };\n    }\n    return {\n      methodOrKey: name,\n      kind: this.isIdentifier(lookahead) || this.isKeyword(lookahead) ? 'identifier' : 'property'\n    };\n  }\n\n  enforestPropertyName() {\n    let lookahead = this.peek();\n\n    if (this.isStringLiteral(lookahead) || this.isNumericLiteral(lookahead)) {\n      return {\n        name: new Term('StaticPropertyName', {\n          value: this.advance()\n        }),\n        binding: null\n      };\n    } else if (this.isBrackets(lookahead)) {\n      let enf = new Enforester(this.matchSquares(), List(), this.context);\n      let expr = enf.enforestExpressionLoop();\n      return {\n        name: new Term('ComputedPropertyName', {\n          expression: expr\n        }),\n        binding: null\n      };\n    }\n    let name = this.advance();\n    return {\n      name: new Term('StaticPropertyName', { value: name }),\n      binding: new Term('BindingIdentifier', { name })\n    };\n  }\n\n  enforestFunction({isExpr, inDefault, allowGenerator}) {\n    let name = null, params, body, rest;\n    let isGenerator = false;\n    // eat the function keyword\n    let fnKeyword = this.advance();\n    let lookahead = this.peek();\n    let type = isExpr ? 'FunctionExpression' : 'FunctionDeclaration';\n\n    if (this.isPunctuator(lookahead, \"*\")) {\n      isGenerator = true;\n      this.advance();\n      lookahead = this.peek();\n    }\n\n    if (!this.isParens(lookahead)) {\n      name = this.enforestBindingIdentifier();\n    } else if (inDefault) {\n      name = new Term('BindingIdentifier', {\n        name: Syntax.fromIdentifier('*default*', fnKeyword)\n      });\n    }\n\n\n    params = this.matchParens();\n\n\n    body = this.matchCurlies();\n\n    let enf = new Enforester(params, List(), this.context);\n    let formalParams = enf.enforestFormalParameters();\n\n    return new Term(type, {\n      name: name,\n      isGenerator: isGenerator,\n      params: formalParams,\n      body: body\n    });\n  }\n\n  enforestFunctionExpression() {\n    let name = null, params, body, rest;\n    let isGenerator = false;\n    // eat the function keyword\n    this.advance();\n    let lookahead = this.peek();\n\n    if (this.isPunctuator(lookahead, \"*\")) {\n      isGenerator = true;\n      this.advance();\n      lookahead = this.peek();\n    }\n\n    if (!this.isParens(lookahead)) {\n      name = this.enforestBindingIdentifier();\n    }\n\n    params = this.matchParens();\n    body = this.matchCurlies();\n\n    let enf = new Enforester(params, List(), this.context);\n    let formalParams = enf.enforestFormalParameters();\n\n    return new Term(\"FunctionExpression\", {\n      name: name,\n      isGenerator: isGenerator,\n      params: formalParams,\n      body: body\n    });\n  }\n\n  enforestFunctionDeclaration() {\n    let name, params, body, rest;\n    let isGenerator = false;\n    // eat the function keyword\n    this.advance();\n    let lookahead = this.peek();\n\n    if (this.isPunctuator(lookahead, \"*\")) {\n      isGenerator = true;\n      this.advance();\n    }\n\n    name = this.enforestBindingIdentifier();\n\n    params = this.matchParens();\n    body = this.matchCurlies();\n\n    let enf = new Enforester(params, List(), this.context);\n    let formalParams = enf.enforestFormalParameters();\n\n    return new Term(\"FunctionDeclaration\", {\n      name: name,\n      isGenerator: isGenerator,\n      params: formalParams,\n      body: body\n    });\n  }\n\n  enforestFormalParameters() {\n    let items = [];\n    let rest = null;\n    while (this.rest.size !== 0) {\n      let lookahead = this.peek();\n      if (this.isPunctuator(lookahead, '...')) {\n        this.matchPunctuator('...');\n        rest = this.enforestBindingIdentifier();\n        break;\n      }\n      items.push(this.enforestParam());\n      this.consumeComma();\n    }\n    return new Term(\"FormalParameters\", {\n      items: List(items), rest\n    });\n  }\n\n  enforestParam() {\n    return this.enforestBindingElement();\n  }\n\n  enforestUpdateExpression() {\n    let operator = this.matchUnaryOperator();\n\n    return new Term('UpdateExpression', {\n      isPrefix: false,\n      operator: operator.val(),\n      operand: this.transformDestructuring(this.term)\n    });\n  }\n\n  enforestUnaryExpression() {\n    let operator = this.matchUnaryOperator();\n    this.opCtx.stack = this.opCtx.stack.push({\n      prec: this.opCtx.prec,\n      combine: this.opCtx.combine\n    });\n    // TODO: all builtins are 14, custom operators will change this\n    this.opCtx.prec = 14;\n    this.opCtx.combine = rightTerm => {\n      let type, term, isPrefix;\n      if (operator.val() === '++' || operator.val() === '--') {\n        type = 'UpdateExpression';\n        term = this.transformDestructuring(rightTerm);\n        isPrefix = true;\n      } else {\n        type = 'UnaryExpression';\n        isPrefix = undefined;\n        term = rightTerm;\n      }\n      return new Term(type, {\n        operator: operator.val(),\n        operand: term,\n        isPrefix\n      });\n    };\n    return EXPR_LOOP_OPERATOR;\n  }\n\n  enforestConditionalExpression() {\n    // first, pop the operator stack\n    let test = this.opCtx.combine(this.term);\n    if (this.opCtx.stack.size > 0) {\n      let { prec, combine } = this.opCtx.stack.last();\n      this.opCtx.stack = this.opCtx.stack.pop();\n      this.opCtx.prec = prec;\n      this.opCtx.combine = combine;\n    }\n\n    this.matchPunctuator('?');\n    let enf = new Enforester(this.rest, List(), this.context);\n    let consequent = enf.enforestExpressionLoop();\n    enf.matchPunctuator(':');\n    enf = new Enforester(enf.rest, List(), this.context);\n    let alternate = enf.enforestExpressionLoop();\n    this.rest = enf.rest;\n    return new Term('ConditionalExpression', {\n      test, consequent, alternate\n    });\n  }\n\n  enforestBinaryExpression() {\n\n    let leftTerm = this.term;\n    let opStx = this.peek();\n    let op = opStx.val();\n    let opPrec = getOperatorPrec(op);\n    let opAssoc = getOperatorAssoc(op);\n\n    if (operatorLt(this.opCtx.prec, opPrec, opAssoc)) {\n      this.opCtx.stack = this.opCtx.stack.push({\n        prec: this.opCtx.prec,\n        combine: this.opCtx.combine\n      });\n      this.opCtx.prec = opPrec;\n      this.opCtx.combine = (rightTerm) => {\n        return new Term(\"BinaryExpression\", {\n          left: leftTerm,\n          operator: opStx,\n          right: rightTerm\n        });\n      };\n      this.advance();\n      return EXPR_LOOP_OPERATOR;\n    } else {\n      let term = this.opCtx.combine(leftTerm);\n      // this.rest does not change\n      let { prec, combine } = this.opCtx.stack.last();\n      this.opCtx.stack = this.opCtx.stack.pop();\n      this.opCtx.prec = prec;\n      this.opCtx.combine = combine;\n      return term;\n    }\n  }\n\n  enforestTemplateElements() {\n    let lookahead = this.matchTemplate();\n    let elements = lookahead.token.items.map(it => {\n      if (it instanceof Syntax && it.isDelimiter()) {\n        let enf = new Enforester(it.inner(), List(), this.context);\n        return enf.enforest(\"expression\");\n      }\n      return new Term('TemplateElement', {\n        rawValue: it.slice.text\n      });\n    });\n    return elements;\n  }\n\n  expandMacro(enforestType) {\n    let name = this.advance();\n\n    let syntaxTransform = this.getCompiletimeTransform(name);\n    if (syntaxTransform == null || typeof syntaxTransform.value !== \"function\") {\n      throw this.createError(name,\n        \"the macro name was not bound to a value that could be invoked\");\n    }\n    let useSiteScope = freshScope(\"u\");\n    let introducedScope = freshScope(\"i\");\n    // TODO: needs to be a list of scopes I think\n    this.context.useScope = useSiteScope;\n\n    let ctx = new MacroContext(this, name, this.context, useSiteScope, introducedScope);\n\n    let result = sanitizeReplacementValues(syntaxTransform.value.call(null, ctx));\n    if (!List.isList(result)) {\n      throw this.createError(name, \"macro must return a list but got: \" + result);\n    }\n    result = result.map(stx => {\n      if (!(stx && typeof stx.addScope === 'function')) {\n        throw this.createError(name, 'macro must return syntax objects or terms but got: ' + stx);\n      }\n      return stx.addScope(introducedScope, this.context.bindings, { flip: true });\n    });\n\n    return result;\n\n  }\n\n  consumeSemicolon() {\n    let lookahead = this.peek();\n\n    if (lookahead && this.isPunctuator(lookahead, \";\")) {\n      this.advance();\n    }\n  }\n\n  consumeComma() {\n    let lookahead = this.peek();\n\n    if (lookahead && this.isPunctuator(lookahead, ',')) {\n      this.advance();\n    }\n  }\n\n  isTerm(term) {\n    return term && (term instanceof Term);\n  }\n\n  isEOF(term) {\n    return term && (term instanceof Syntax) && term.isEOF();\n  }\n\n  isIdentifier(term, val = null) {\n    return term && (term instanceof Syntax) && term.isIdentifier() &&\n            ((val === null) || (term.val() === val));\n  }\n\n  isPropertyName(term) {\n    return this.isIdentifier(term) || this.isKeyword(term) ||\n           this.isNumericLiteral(term) || this.isStringLiteral(term) || this.isBrackets(term);\n  }\n\n  isNumericLiteral(term) {\n    return term && (term instanceof Syntax) && term.isNumericLiteral();\n  }\n\n  isStringLiteral(term) {\n    return term && (term instanceof Syntax) && term.isStringLiteral();\n  }\n\n  isTemplate(term) {\n    return term && (term instanceof Syntax) && term.isTemplate();\n  }\n\n  isBooleanLiteral(term) {\n    return term && (term instanceof Syntax) && term.isBooleanLiteral();\n  }\n\n  isNullLiteral(term) {\n    return term && (term instanceof Syntax) && term.isNullLiteral();\n  }\n\n  isRegularExpression(term) {\n    return term && (term instanceof Syntax) && term.isRegularExpression();\n  }\n\n  isParens(term) {\n    return term && (term instanceof Syntax) && term.isParens();\n  }\n\n  isBraces(term) {\n    return term && (term instanceof Syntax) && term.isBraces();\n  }\n\n  isBrackets(term) {\n    return term && (term instanceof Syntax) && term.isBrackets();\n  }\n\n  isAssign(term) {\n    if (this.isPunctuator(term)) {\n      switch (term.val()) {\n        case \"=\":\n        case \"|=\":\n        case \"^=\":\n        case \"&=\":\n        case \"<<=\":\n        case \">>=\":\n        case \">>>=\":\n        case \"+=\":\n        case \"-=\":\n        case \"*=\":\n        case \"/=\":\n        case \"%=\":\n          return true;\n        default:\n          return false;\n      }\n    }\n    return false;\n  }\n\n  isKeyword(term, val = null) {\n    return term && (term instanceof Syntax) &&\n           term.isKeyword() && ((val === null) || (term.val() === val));\n  }\n\n  isPunctuator(term, val = null) {\n    return term && (term instanceof Syntax) &&\n           term.isPunctuator() && ((val === null) || (term.val() === val));\n  }\n\n  isOperator(term) {\n    return term && (term instanceof Syntax) && isOperator(term);\n  }\n  isUpdateOperator(term) {\n    return term && (term instanceof Syntax) && term.isPunctuator() &&\n      (term.val() === '++' || term.val() === '--');\n  }\n\n  isFnDeclTransform(term) {\n    return term && (term instanceof Syntax) &&\n           this.context.env.get(term.resolve()) === FunctionDeclTransform;\n  }\n\n  isVarDeclTransform(term) {\n    return term && (term instanceof Syntax) &&\n           this.context.env.get(term.resolve()) === VariableDeclTransform;\n  }\n\n  isLetDeclTransform(term) {\n    return term && (term instanceof Syntax) &&\n           this.context.env.get(term.resolve()) === LetDeclTransform;\n  }\n\n  isConstDeclTransform(term) {\n    return term && (term instanceof Syntax) &&\n           this.context.env.get(term.resolve()) === ConstDeclTransform;\n  }\n\n  isSyntaxDeclTransform(term) {\n    return term && (term instanceof Syntax) &&\n           this.context.env.get(term.resolve()) === SyntaxDeclTransform;\n  }\n\n  isSyntaxrecDeclTransform(term) {\n    return term && (term instanceof Syntax) &&\n           this.context.env.get(term.resolve()) === SyntaxrecDeclTransform;\n  }\n  isSyntaxTemplate(term) {\n    return term && (term instanceof Syntax) && term.isSyntaxTemplate();\n  }\n  isSyntaxQuoteTransform(term) {\n    return term && (term instanceof Syntax) &&\n           this.context.env.get(term.resolve()) === SyntaxQuoteTransform;\n  }\n\n  isReturnStmtTransform(term) {\n    return term && (term instanceof Syntax) &&\n           this.context.env.get(term.resolve()) === ReturnStatementTransform;\n  }\n\n  isWhileTransform(term) {\n    return term && (term instanceof Syntax) &&\n           this.context.env.get(term.resolve()) === WhileTransform;\n  }\n\n  isForTransform(term) {\n    return term && (term instanceof Syntax) &&\n           this.context.env.get(term.resolve()) === ForTransform;\n  }\n  isSwitchTransform(term) {\n    return term && (term instanceof Syntax) &&\n           this.context.env.get(term.resolve()) === SwitchTransform;\n  }\n  isBreakTransform(term) {\n    return term && (term instanceof Syntax) &&\n           this.context.env.get(term.resolve()) === BreakTransform;\n  }\n  isContinueTransform(term) {\n    return term && (term instanceof Syntax) &&\n           this.context.env.get(term.resolve()) === ContinueTransform;\n  }\n  isDoTransform(term) {\n    return term && (term instanceof Syntax) &&\n           this.context.env.get(term.resolve()) === DoTransform;\n  }\n  isDebuggerTransform(term) {\n    return term && (term instanceof Syntax) &&\n           this.context.env.get(term.resolve()) === DebuggerTransform;\n  }\n  isWithTransform(term) {\n    return term && (term instanceof Syntax) &&\n           this.context.env.get(term.resolve()) === WithTransform;\n  }\n  isTryTransform(term) {\n    return term && (term instanceof Syntax) &&\n           this.context.env.get(term.resolve()) === TryTransform;\n  }\n  isThrowTransform(term) {\n    return term && (term instanceof Syntax) &&\n           this.context.env.get(term.resolve()) === ThrowTransform;\n  }\n  isIfTransform(term) {\n    return term && (term instanceof Syntax) &&\n           this.context.env.get(term.resolve()) === IfTransform;\n  }\n  isNewTransform(term) {\n    return term && (term instanceof Syntax) &&\n           this.context.env.get(term.resolve()) === NewTransform;\n  }\n\n  isCompiletimeTransform(term) {\n    return term && (term instanceof Syntax) &&\n           (this.context.env.get(term.resolve()) instanceof CompiletimeTransform ||\n            this.context.store.get(term.resolve()) instanceof CompiletimeTransform);\n  }\n\n  getCompiletimeTransform(term) {\n    if (this.context.env.has(term.resolve())) {\n      return this.context.env.get(term.resolve());\n    }\n    return this.context.store.get(term.resolve());\n  }\n\n  lineNumberEq(a, b) {\n    if (!(a && b)) {\n      return false;\n    }\n    assert(a instanceof Syntax, \"expecting a syntax object\");\n    assert(b instanceof Syntax, \"expecting a syntax object\");\n    return a.lineNumber() === b.lineNumber();\n  }\n\n  matchIdentifier(val) {\n    let lookahead = this.advance();\n    if (this.isIdentifier(lookahead)) {\n      return lookahead;\n    }\n    throw this.createError(lookahead, \"expecting an identifier\");\n  }\n\n  matchKeyword(val) {\n    let lookahead = this.advance();\n    if (this.isKeyword(lookahead, val)) {\n      return lookahead;\n    }\n    throw this.createError(lookahead, 'expecting ' + val);\n  }\n\n  matchLiteral() {\n    let lookahead = this.advance();\n    if (this.isNumericLiteral(lookahead) ||\n        this.isStringLiteral(lookahead) ||\n        this.isBooleanLiteral(lookahead) ||\n        this.isNullLiteral(lookahead) ||\n        this.isTemplate(lookahead) ||\n        this.isRegularExpression(lookahead)) {\n      return lookahead;\n    }\n    throw this.createError(lookahead, \"expecting a literal\");\n  }\n\n  matchStringLiteral() {\n    let lookahead = this.advance();\n    if (this.isStringLiteral(lookahead)) {\n      return lookahead;\n    }\n    throw this.createError(lookahead, 'expecting a string literal');\n  }\n\n  matchTemplate() {\n    let lookahead = this.advance();\n    if (this.isTemplate(lookahead)) {\n      return lookahead;\n    }\n    throw this.createError(lookahead, 'expecting a template literal');\n  }\n\n  matchParens() {\n    let lookahead = this.advance();\n    if (this.isParens(lookahead)) {\n      return lookahead.inner();\n    }\n    throw this.createError(lookahead, \"expecting parens\");\n  }\n\n  matchCurlies() {\n    let lookahead = this.advance();\n    if (this.isBraces(lookahead)) {\n      return lookahead.inner();\n    }\n    throw this.createError(lookahead, \"expecting curly braces\");\n  }\n  matchSquares() {\n    let lookahead = this.advance();\n    if (this.isBrackets(lookahead)) {\n      return lookahead.inner();\n    }\n    throw this.createError(lookahead, \"expecting sqaure braces\");\n  }\n\n  matchUnaryOperator() {\n    let lookahead = this.advance();\n    if (isUnaryOperator(lookahead)) {\n      return lookahead;\n    }\n    throw this.createError(lookahead, \"expecting a unary operator\");\n  }\n\n  matchPunctuator(val) {\n    let lookahead = this.advance();\n    if (this.isPunctuator(lookahead)) {\n      if (typeof val !== 'undefined') {\n        if (lookahead.val() === val) {\n          return lookahead;\n        } else {\n          throw this.createError(lookahead,\n            \"expecting a \" + val + \" punctuator\");\n        }\n      }\n      return lookahead;\n    }\n    throw this.createError(lookahead, \"expecting a punctuator\");\n  }\n\n  createError(stx, message) {\n    let ctx = \"\";\n    let offending = stx;\n    if (this.rest.size > 0) {\n      ctx = this.rest.slice(0, 20).map(term => {\n        if (term.isDelimiter()) {\n          return term.inner();\n        }\n        return List.of(term);\n      }).flatten().map(s => {\n        if (s === offending) {\n          return \"__\" + s.val() + \"__\";\n        }\n        return s.val();\n      }).join(\" \");\n    } else {\n      ctx = offending.toString();\n    }\n    return new Error(message + \"\\n\" + ctx);\n\n  }\n}\n"],"sourceRoot":"/source/"}