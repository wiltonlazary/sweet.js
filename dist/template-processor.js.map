{"version":3,"sources":["template-processor.js"],"names":[],"mappings":"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","file":"template-processor.js","sourcesContent":["import { List } from 'immutable';\nimport { Maybe } from 'ramda-fantasy';\nimport _ from 'ramda';\nimport Syntax from './syntax';\nimport { assert } from './errors';\n\n/*\nGiven a syntax list like:\n\n  [foo, bar, $, { 42, +, 24 }, baz]\n\nconvert it to:\n\n  [foo, bar, $, { 0 }, baz]\n\nand return another list with the interpolated values at the corresponding\npositions.\n\nRequires either lookahead/lookbehind of one (to see the $).\n*/\n\nconst isDolar     = s => s && s instanceof Syntax && s.isIdentifier() && s.val() === '$';\nconst isDelimiter = s => s && typeof s.isDelimiter === 'function' && s.isDelimiter();\nconst isBraces    = s => s && typeof s.isBraces === 'function' && s.isBraces();\nconst isParens    = s => s && typeof s.isParens === 'function' && s.isParens();\nconst isBrackets  = s => s && typeof s.isBrackets === 'function' && s.isBrackets();\n\nconst insertIntoDelimiter = _.cond([\n  [isBraces, (s, r) => Syntax.fromBraces(r, s)],\n  [isParens, (s, r) => Syntax.fromParens(r, s)],\n  [isBrackets, (s, r) => Syntax.fromBrackets(r, s)]\n]);\n\nconst process = (acc, s) => {\n  if (isBraces(s) && isDolar(acc.template.last())) {\n    return {\n      template: acc.template.push(Syntax.fromBraces(List.of(Syntax.fromNumber(acc.interp.size)), s)),\n      interp: acc.interp.push(s.inner())\n    };\n  } else if (isDelimiter(s)) {\n    let innerResult = processTemplate(s.inner(), acc.interp);\n    return {\n      template: acc.template.push(insertIntoDelimiter(s, innerResult.template)),\n      interp: innerResult.interp\n    };\n  } else {\n    return {\n      template: acc.template.push(s),\n      interp: acc.interp\n    };\n  }\n};\n\nconst replace = (acc, s) => {\n  if (isBraces(s) && isDolar(acc.template.last())) {\n    let index = s.inner().first().val();\n    assert(acc.rep.size > index, \"unknown replacement value\");\n    return {\n      template: acc.template.pop().concat(acc.rep.get(index)),\n      rep: acc.rep\n    };\n  } else if (isDelimiter(s)) {\n    let innerResult = replaceTemplate(s.inner(), acc.rep);\n    return {\n      template: acc.template.push(insertIntoDelimiter(s, innerResult)),\n      rep: acc.rep\n    };\n  } else {\n    return {\n      template: acc.template.push(s),\n      rep: acc.rep\n    };\n  }\n};\n\nexport function processTemplate(temp, interp = List()) {\n  return temp.reduce(process, { template: List(), interp });\n}\n\nexport function replaceTemplate(temp, rep) {\n  return temp.reduce(replace, { template: List(), rep }).template;\n}\n\n\n"],"sourceRoot":"/source/"}