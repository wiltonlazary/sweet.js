{"version":3,"sources":["errors.js"],"names":[],"mappings":";;;;;QAAgB;QAeA;AAfT,SAAS,MAAT,CAAgB,IAAhB,EAAsB,OAAtB,EAA+B,eAA/B,EAAgD,IAAhD,EAAsD;AAC3D,MAAI,CAAC,IAAD,EAAO;AACT,QAAI,MAAM,EAAN,CADK;AAET,QAAI,IAAJ,EAAU;AACR,UAAI,OAAM,KAAK,KAAL,CAAW,CAAX,EAAc,EAAd,EAAkB,GAAlB,CAAsB,aAAK;AACnC,YAAI,MAAM,eAAN,EAAuB;AACzB,iBAAO,OAAO,EAAE,GAAF,EAAP,GAAiB,IAAjB,CADkB;SAA3B;AAGA,eAAO,EAAE,GAAF,EAAP,CAJmC;OAAL,CAAtB,CAKP,IALO,CAKF,GALE,CAAN,CADI;KAAV;AAQA,UAAM,IAAI,KAAJ,CAAU,cAAc,OAAd,GAAwB,IAAxB,GAA+B,GAA/B,CAAhB,CAVS;GAAX;CADK;;AAeA,SAAS,MAAT,CAAgB,IAAhB,EAAsB,OAAtB,EAA+B;AACpC,MAAI,CAAC,IAAD,EAAO;AACT,UAAM,IAAI,KAAJ,CAAU,wBAAwB,OAAxB,CAAhB,CADS;GAAX;CADK","file":"errors.js","sourcesContent":["export function expect(cond, message, offendingSyntax, rest) {\n  if (!cond) {\n    let ctx = \"\";\n    if (rest) {\n      let ctx = rest.slice(0, 20).map(s => {\n        if (s === offendingSyntax) {\n          return \"__\" + s.val() + \"__\";\n        }\n        return s.val();\n      }).join(\" \");\n    }\n    throw new Error(\"[error]: \" + message + \"\\n\" + ctx);\n  }\n}\n\nexport function assert(cond, message) {\n  if (!cond) {\n    throw new Error(\"[assertion error]: \" + message);\n  }\n}\n"],"sourceRoot":"/source/"}