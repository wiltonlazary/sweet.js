{"version":3,"sources":["term-expander.js"],"names":[],"mappings":";;;;;;;;AAAA;;AACA;;;;AAKA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;AACA;;AACA;;;;;;IAEqB;AACnB,WADmB,YACnB,CAAY,OAAZ,EAAqB;0BADF,cACE;;AACnB,SAAK,OAAL,GAAe,OAAf,CADmB;GAArB;;eADmB;;2BAKZ,MAAM;AACX,UAAI,QAAQ,WAAW,KAAK,IAAL,CADZ;AAEX,UAAI,OAAO,KAAK,KAAL,CAAP,KAAuB,UAAvB,EAAmC;AACrC,eAAO,KAAK,KAAL,EAAY,IAAZ,CAAP,CADqC;OAAvC;AAGA,0BAAO,KAAP,EAAc,qCAAqC,KAAK,IAAL,CAAnD,CALW;;;;6CAQY,MAAM;AAC7B,aAAO,oBAAS,oBAAT,EAA+B;AACpC,aAAK,KAAK,GAAL,IAAY,IAAZ,GAAmB,IAAnB,GAA0B,KAAK,MAAL,CAAY,KAAK,GAAL,CAAtC;AACL,kBAAU,KAAK,QAAL,CAAc,OAAd,EAAV;OAFK,CAAP,CAD6B;;;;yCAOV,MAAM;AACzB,aAAO,oBAAS,gBAAT,EAA2B;AAChC,eAAO,KAAK,KAAL,GAAa,KAAK,KAAL,CAAW,GAAX,EAAb,GAAgC,IAAhC;OADF,CAAP,CADyB;;;;2CAMJ,MAAM;AAC3B,aAAO,oBAAS,kBAAT,EAA6B;AAClC,cAAM,KAAK,MAAL,CAAY,KAAK,IAAL,CAAlB;AACA,cAAM,KAAK,MAAL,CAAY,KAAK,IAAL,CAAlB;OAFK,CAAP,CAD2B;;;;wCAOT,MAAM;AACxB,aAAO,oBAAS,eAAT,EAA0B;AAC/B,cAAM,KAAK,MAAL,CAAY,KAAK,IAAL,CAAlB;AACA,gBAAQ,KAAK,MAAL,CAAY,KAAK,MAAL,CAApB;OAFK,CAAP,CADwB;;;;4CAOF,MAAM;AAAE,aAAO,IAAP,CAAF;;;;4CAEN,MAAM;AAC5B,aAAO,oBAAS,mBAAT,EAA8B;AACnC,eAAO,KAAK,KAAL,GAAa,KAAK,KAAL,CAAW,GAAX,EAAb,GAAgC,IAAhC;OADF,CAAP,CAD4B;;;;qDAMG,MAAM;;;AACrC,aAAO,oBAAS,4BAAT,EAAuC;AAC5C,sBAAc,KAAK,MAAL,CAAY,KAAK,YAAL,CAA1B;AACA,yBAAiB,KAAK,eAAL,CAAqB,GAArB,CAAyB;iBAAK,MAAK,MAAL,CAAY,CAAZ;SAAL,CAAzB,CAA8C,OAA9C,EAAjB;AACA,qBAAa,KAAK,MAAL,CAAY,KAAK,WAAL,CAAzB;AACA,0BAAkB,KAAK,gBAAL,CAAsB,GAAtB,CAA0B;iBAAK,MAAK,MAAL,CAAY,CAAZ;SAAL,CAA1B,CAA+C,OAA/C,EAAlB;OAJK,CAAP,CADqC;;;;mDASR,MAAM;AACnC,aAAO,oBAAS,0BAAT,EAAqC;AAC1C,gBAAQ,KAAK,MAAL,CAAY,KAAK,MAAL,CAApB;AACA,oBAAY,KAAK,MAAL,CAAY,KAAK,UAAL,CAAxB;OAFK,CAAP,CADmC;;;;0CAOf,MAAM;;;AAC1B,aAAO,oBAAS,iBAAT,EAA4B;AACjC,sBAAc,KAAK,MAAL,CAAY,KAAK,YAAL,CAA1B;AACA,eAAO,KAAK,KAAL,CAAW,GAAX,CAAe;iBAAK,OAAK,MAAL,CAAY,CAAZ;SAAL,CAAf,CAAoC,OAApC,EAAP;OAFK,CAAP,CAD0B;;;;2CAOL,MAAM;;;AAC3B,UAAI,OAAO,KAAK,IAAL,IAAa,IAAb,GAAoB,IAApB,GAA2B,KAAK,MAAL,CAAY,KAAK,IAAL,CAAvC,CADgB;AAE3B,aAAO,oBAAS,kBAAT,EAA6B;AAClC,eAAO,KAAK,KAAL,CAAW,GAAX,CAAe;iBAAK,OAAK,MAAL,CAAY,CAAZ;SAAL,CAAtB;AACA,kBAFkC;OAA7B,CAAP,CAF2B;;;;0CAQP,MAAM;;;AAC1B,UAAI,aAAJ,CAD0B;AAE1B,UAAI,gBAAK,MAAL,CAAY,KAAK,IAAL,CAAhB,EAA4B;;AAC1B,cAAI,QAAQ,uBAAW,KAAX,CAAR;AACJ,iBAAK,OAAL,CAAa,YAAb,CAA0B,IAA1B,CAA+B,KAA/B;AACA,cAAI,WAAW,uBAAa,OAAK,OAAL,CAAxB;;AAEJ,iBAAO,oBAAS,cAAT,EAAyB;AAC9B,wBAAY,sBAAZ;AACA,wBAAY,SAAS,MAAT,CAAgB,KAAK,IAAL,CAAU,GAAV,CAAc;qBAAK,EAAE,QAAF,CAAW,KAAX,EAAkB,OAAK,OAAL,CAAa,QAAb;aAAvB,CAA9B,CAAZ;WAFK,CAAP;AAIA,iBAAK,OAAL,CAAa,YAAb,CAA0B,GAA1B;aAT0B;OAA5B,MAUO;AACL,eAAO,KAAK,MAAL,CAAY,KAAK,IAAL,CAAnB,CADK;OAVP;AAaA,aAAO,oBAAS,iBAAT,EAA4B;;AAEjC,gBAAQ,KAAK,MAAL,CAAY,KAAK,MAAL,CAApB;AACA,kBAHiC;OAA5B,CAAP,CAf0B;;;;wCAsBR,MAAM;;;AACxB,aAAO,oBAAS,eAAT,EAA0B;AAC/B,oBAAY,KAAK,UAAL,CAAgB,GAAhB,CAAoB;iBAAK,OAAK,MAAL,CAAY,CAAZ;SAAL,CAApB,CAAyC,OAAzC,EAAZ;OADK,CAAP,CADwB;;;;qCAMT,MAAM;;;AACrB,aAAO,oBAAS,YAAT,EAAuB;AAC5B,cAAM,KAAK,MAAL,CAAY,KAAK,IAAL,CAAlB;AACA,oBAAY,KAAK,UAAL,CAAgB,GAAhB,CAAoB;iBAAK,OAAK,MAAL,CAAY,CAAZ;SAAL,CAApB,CAAyC,OAAzC,EAAZ;OAFK,CAAP,CADqB;;;;yCAOF,MAAM;AACzB,aAAO,oBAAS,gBAAT,EAA2B;AAChC,cAAM,KAAK,MAAL,CAAY,KAAK,IAAL,CAAlB;AACA,eAAO,KAAK,MAAL,CAAY,KAAK,KAAL,CAAnB;AACA,cAAM,KAAK,MAAL,CAAY,KAAK,IAAL,CAAlB;OAHK,CAAP,CADyB;;;;4CAQH,MAAM;AAC5B,aAAO,oBAAS,mBAAT,EAA8B;AACnC,cAAM,KAAK,MAAL,CAAY,KAAK,IAAL,CAAlB;AACA,qBAAa,KAAK,MAAL,CAAY,KAAK,WAAL,CAAzB;OAFK,CAAP,CAD4B;;;;8CAOJ,MAAM;AAC9B,UAAI,cAAc,KAAK,WAAL,IAAoB,IAApB,GAA2B,IAA3B,GAAkC,KAAK,MAAL,CAAY,KAAK,WAAL,CAA9C,CADY;AAE9B,aAAO,oBAAS,qBAAT,EAAgC;AACrC,cAAM,KAAK,MAAL,CAAY,KAAK,IAAL,CAAlB;AACA,gCAFqC;AAGrC,mBAAW,KAAK,MAAL,CAAY,KAAK,SAAL,CAAvB;OAHK,CAAP,CAF8B;;;;sCASd,MAAM;AACtB,aAAO,oBAAS,aAAT,EAAwB;AAC7B,iBAAS,KAAK,MAAL,CAAY,KAAK,OAAL,CAArB;AACA,cAAM,KAAK,MAAL,CAAY,KAAK,IAAL,CAAlB;OAFK,CAAP,CADsB;;;;yCAOH,MAAM;AACzB,aAAO,oBAAS,gBAAT,EAA2B;AAChC,oBAAY,KAAK,MAAL,CAAY,KAAK,UAAL,CAAxB;OADK,CAAP,CADyB;;;;yCAMN,MAAM;AACzB,aAAO,oBAAS,gBAAT,EAA2B;AAChC,cAAM,KAAK,MAAL,CAAY,KAAK,IAAL,CAAlB;AACA,eAAO,KAAK,MAAL,CAAY,KAAK,KAAL,CAAnB;AACA,cAAM,KAAK,MAAL,CAAY,KAAK,IAAL,CAAlB;OAHK,CAAP,CADyB;;;;4CAQH,MAAM;AAC5B,aAAO,IAAP,CAD4B;;;;oDAIE,MAAM;AACpC,aAAO,IAAP,CADoC;;;;kDAGR,MAAM;AAClC,aAAO,oBAAS,yBAAT,EAAoC;AACzC,cAAM,KAAK,MAAL,CAAY,KAAK,IAAL,CAAlB;AACA,iBAAS,KAAK,MAAL,CAAY,KAAK,OAAL,CAArB;OAFK,CAAP,CADkC;;;;+CAOT,MAAM;AAC/B,aAAO,oBAAS,sBAAT,EAAiC;AACtC,oBAAY,KAAK,MAAL,CAAY,KAAK,UAAL,CAAxB;OADK,CAAP,CAD+B;;;;wCAMb,MAAM;;;AACxB,aAAO,oBAAS,eAAT,EAA0B;AAC/B,oBAAY,KAAK,UAAL,CAAgB,GAAhB,CAAoB;iBAAK,OAAK,MAAL,CAAY,CAAZ;SAAL,CAApB,CAAyC,OAAzC,EAAZ;OADK,CAAP,CADwB;;;;uCAMP,MAAM;;;AACvB,UAAI,cAAc,KAAK,WAAL,IAAoB,IAApB,GAA2B,IAA3B,GAAkC,KAAK,MAAL,CAAY,KAAK,WAAL,CAA9C,CADK;AAEvB,aAAO,oBAAS,cAAT,EAAyB;AAC9B,kBAAU,KAAK,QAAL,CAAc,GAAd,CAAkB;iBAAK,KAAK,IAAL,GAAY,IAAZ,GAAmB,OAAK,MAAL,CAAY,CAAZ,CAAnB;SAAL,CAAlB,CAA0D,OAA1D,EAAV;AACA,gCAF8B;OAAzB,CAAP,CAFuB;;;;6CAQA,MAAM;AAC7B,aAAO,oBAAS,oBAAT,EAA+B;AACpC,iBAAS,KAAK,MAAL,CAAY,KAAK,OAAL,CAArB;AACA,cAAM,KAAK,MAAL,CAAY,KAAK,IAAL,CAAlB;OAFK,CAAP,CAD6B;;;;4CAOP,MAAM;AAC5B,aAAO,oBAAS,mBAAT,EAA8B;AACnC,cAAM,KAAK,IAAL,CAAU,GAAV,EAAN;OADK,CAAP,CAD4B;;;;uCAOX,MAAM;AACvB,UAAI,OAAO,KAAK,IAAL,IAAa,IAAb,GAAoB,IAApB,GAA2B,KAAK,MAAL,CAAY,KAAK,IAAL,CAAvC,CADY;AAEvB,UAAI,OAAO,KAAK,IAAL,IAAa,IAAb,GAAoB,IAApB,GAA2B,KAAK,MAAL,CAAY,KAAK,IAAL,CAAvC,CAFY;AAGvB,UAAI,SAAS,KAAK,MAAL,IAAe,IAAf,GAAsB,IAAtB,GAA6B,KAAK,MAAL,CAAY,KAAK,MAAL,CAAzC,CAHU;AAIvB,UAAI,OAAO,KAAK,MAAL,CAAY,KAAK,IAAL,CAAnB,CAJmB;AAKvB,aAAO,oBAAS,cAAT,EAAyB,EAAE,UAAF,EAAQ,UAAR,EAAc,cAAd,EAAsB,UAAtB,EAAzB,CAAP,CALuB;;;;0CAQH,MAAM;AAC1B,UAAI,OAAO,KAAK,UAAL,IAAmB,IAAnB,GAA0B,IAA1B,GAAiC,KAAK,MAAL,CAAY,KAAK,UAAL,CAA7C,CADe;AAE1B,aAAO,oBAAS,iBAAT,EAA4B;AACjC,oBAAY,IAAZ;OADK,CAAP,CAF0B;;;;mDAOG,MAAM;AACnC,UAAI,OAAO,KAAK,UAAL,IAAmB,IAAnB,GAA0B,IAA1B,GAAiC,KAAK,MAAL,CAAY,KAAK,UAAL,CAA7C,CADwB;AAEnC,aAAO,oBAAS,0BAAT,EAAqC;AAC1C,oBAAY,IAAZ;OADK,CAAP,CAFmC;;;;yCAOhB,MAAM;AACzB,aAAO,oBAAS,gBAAT,EAA2B;AAChC,cAAM,KAAK,MAAL,CAAY,KAAK,IAAL,CAAlB;AACA,cAAM,KAAK,MAAL,CAAY,KAAK,IAAL,CAAlB;OAFK,CAAP,CADyB;;;;sCAOT,MAAM;AACtB,UAAI,aAAa,KAAK,UAAL,IAAmB,IAAnB,GAA0B,IAA1B,GAAiC,KAAK,MAAL,CAAY,KAAK,UAAL,CAA7C,CADK;AAEtB,UAAI,YAAY,KAAK,SAAL,IAAkB,IAAlB,GAAyB,IAAzB,GAAgC,KAAK,MAAL,CAAY,KAAK,SAAL,CAA5C,CAFM;AAGtB,aAAO,oBAAS,aAAT,EAAwB;AAC7B,cAAM,KAAK,MAAL,CAAY,KAAK,IAAL,CAAlB;AACA,oBAAY,UAAZ;AACA,mBAAW,SAAX;OAHK,CAAP,CAHsB;;;;yCAUH,MAAM;AACzB,aAAO,oBAAS,gBAAT,EAA2B;AAChC,eAAO,KAAK,MAAL,CAAY,KAAK,KAAL,CAAnB;OADK,CAAP,CADyB;;;;gCAMf,MAAM;;;AAChB,aAAO,oBAAS,OAAT,EAAkB;AACvB,oBAAY,KAAK,UAAL,CAAgB,GAAhB,CAAoB;iBAAK,OAAK,MAAL,CAAY,CAAZ;SAAL,CAApB,CAAyC,OAAzC,EAAZ;OADK,CAAP,CADgB;;;;uDAMiB,MAAM;AACvC,aAAO,oBAAS,8BAAT,EAAyC;AAC9C,qBAAa,KAAK,MAAL,CAAY,KAAK,WAAL,CAAzB;OADK,CAAP,CADuC;;;;0CAKnB,MAAM;AAC1B,UAAI,KAAK,UAAL,IAAmB,IAAnB,EAAyB;AAC3B,eAAO,IAAP,CAD2B;OAA7B;AAGA,aAAO,oBAAS,iBAAT,EAA4B;AACjC,oBAAY,KAAK,MAAL,CAAY,KAAK,UAAL,CAAxB;OADK,CAAP,CAJ0B;;;;2CASL,MAAM;;;AAC3B,aAAO,oBAAS,kBAAT,EAA6B;AAClC,cAAM,KAAK,IAAL,IAAa,IAAb,GAAoB,IAApB,GAA2B,KAAK,MAAL,CAAY,KAAK,IAAL,CAAvC;AACN,eAAO,KAAK,KAAL,IAAc,IAAd,GAAqB,IAArB,GAA4B,KAAK,MAAL,CAAY,KAAK,KAAL,CAAxC;AACP,kBAAU,KAAK,QAAL,CAAc,GAAd,CAAkB;iBAAM,QAAK,MAAL,CAAY,EAAZ;SAAN,CAAlB,CAAyC,OAAzC,EAAV;OAHK,CAAP,CAD2B;;;;0CAQP,MAAM;;;AAC1B,aAAO,oBAAS,iBAAT,EAA4B;AACjC,cAAM,KAAK,IAAL,IAAa,IAAb,GAAoB,IAApB,GAA2B,KAAK,MAAL,CAAY,KAAK,IAAL,CAAvC;AACN,eAAO,KAAK,KAAL,IAAc,IAAd,GAAqB,IAArB,GAA4B,KAAK,MAAL,CAAY,KAAK,KAAL,CAAxC;AACP,kBAAU,KAAK,QAAL,CAAc,GAAd,CAAkB;iBAAM,QAAK,MAAL,CAAY,EAAZ;SAAN,CAAlB,CAAyC,OAAzC,EAAV;OAHK,CAAP,CAD0B;;;;uCAQT,MAAM;AACvB,aAAO,oBAAS,cAAT,EAAyB;AAC9B,kBAAU,KAAK,QAAL;AACV,gBAAQ,KAAK,MAAL,CAAY,KAAK,MAAL,CAApB;OAFK,CAAP,CADuB;;;;yCAOJ,MAAM;AACzB,aAAO,IAAP,CADyB;;;;yCAIN,MAAM;;;AACzB,UAAI,WAAW,uBAAa,KAAK,OAAL,CAAxB,CADqB;AAEzB,UAAI,IAAI,wCAAgB,KAAK,QAAL,CAAc,KAAd,EAAhB,CAAJ,CAFqB;AAGzB,UAAI,MAAM,iBAAO,UAAP,CAAkB,uBAAW,KAAX,CAAiB,EAAE,QAAF,CAAnC,CAAN,CAHqB;AAIzB,UAAI,SAAS,oBAAS,sBAAT,EAAiC,EAAE,MAAM,iBAAO,cAAP,CAAsB,gBAAtB,CAAN,EAAnC,CAAT,CAJqB;;AAMzB,UAAI,kBAAkB,EAAE,MAAF,CAAS,GAAT,CAAa,aAAK;AACtC,YAAI,MAAM,2BAAe,CAAf,EAAkB,sBAAlB,EAA0B,QAAK,OAAL,CAAhC,CADkC;AAEtC,eAAO,QAAK,MAAL,CAAY,IAAI,QAAJ,CAAa,YAAb,CAAZ,CAAP,CAFsC;OAAL,CAA/B,CANqB;;AAWzB,UAAI,OAAO,gBAAK,EAAL,CAAQ,oBAAS,yBAAT,EAAoC,EAAC,OAAO,GAAP,EAArC,CAAR,EACK,MADL,CACY,eADZ,CAAP,CAXqB;;AAczB,aAAO,oBAAS,gBAAT,EAA2B;AAChC,sBADgC,EACxB,WAAW,IAAX;OADH,CAAP,CAdyB;;;;sCAmBT,MAAM;AACtB,UAAI,MAAM,oBAAS,yBAAT,EAAoC;AAC5C,eAAO,iBAAO,UAAP,CAAkB,uBAAW,KAAX,CAAiB,KAAK,IAAL,CAAnC,CAAP;OADQ,CAAN,CADkB;;AAKtB,aAAO,oBAAS,oBAAT,EAA+B;AACpC,aAAK,KAAK,QAAL,CAAc,GAAd;AACL,kBAAU,KAAK,QAAL,CAAc,QAAd,CAAuB,IAAvB,CAA4B,GAA5B,EAAiC,IAAjC,CAAsC,oBAAS,iBAAT,EAA4B;AAC1E,oBAAU,EAAV;SAD8C,CAAtC,EAEN,OAFM,EAAV;OAFK,CAAP,CALsB;;;;iDAaK,MAAM;AACjC,aAAO,oBAAS,wBAAT,EAAmC;AACxC,gBAAQ,KAAK,MAAL,CAAY,KAAK,MAAL,CAApB;AACA,kBAAU,KAAK,QAAL;OAFL,CAAP,CADiC;;;;0CAOb,MAAM;;;AAC1B,aAAO,oBAAS,iBAAT,EAA4B;AACjC,kBAAU,KAAK,QAAL,CAAc,GAAd,CAAkB;iBAAK,KAAK,IAAL,GAAY,CAAZ,GAAgB,QAAK,MAAL,CAAY,CAAZ,CAAhB;SAAL,CAA5B;OADK,CAAP,CAD0B;;;;iCAMf,MAAM;AACjB,aAAO,IAAP,CADiB;;;;0CAIG,MAAM;AAC1B,aAAO,IAAP,CAD0B;;;;iCAIf,MAAM;AACjB,aAAO,oBAAS,QAAT,EAAmB;AACxB,qBAAa,KAAK,MAAL,CAAY,KAAK,WAAL,CAAzB;OADK,CAAP,CADiB;;;;wCAMC,MAAM;AACxB,aAAO,oBAAS,eAAT,EAA0B;AAC/B,cAAM,KAAK,MAAL,CAAY,KAAK,IAAL,CAAlB;OADK,CAAP,CADwB;;;;qCAOT,MAAM;AACrB,aAAO,IAAP,CADqB;;;;wCAIH,MAAM;AACxB,aAAO,IAAP,CADwB;;;;0CAIJ,MAAM;AAC1B,aAAO,IAAP,CAD0B;;;;6CAIH,MAAM;AAC7B,aAAO,IAAP,CAD6B;;;;uCAIZ,MAAM;AACvB,aAAO,oBAAS,cAAT,EAAyB;AAC9B,cAAM,KAAK,MAAL,CAAY,KAAK,IAAL,CAAlB;AACA,oBAAY,KAAK,MAAL,CAAY,KAAK,UAAL,CAAxB;OAFK,CAAP,CADuB;;;;2CAQF,MAAM;;;AAC3B,aAAO,oBAAS,kBAAT,EAA6B;AAClC,oBAAY,KAAK,UAAL,CAAgB,GAAhB,CAAoB;iBAAK,QAAK,MAAL,CAAY,CAAZ;SAAL,CAAhC;OADK,CAAP,CAD2B;;;;6CAMJ,MAAM;AAC7B,UAAI,OAAO,KAAK,IAAL,IAAa,IAAb,GAAoB,IAApB,GAA2B,KAAK,MAAL,CAAY,KAAK,IAAL,CAAvC,CADkB;AAE7B,aAAO,oBAAS,oBAAT,EAA+B;AACpC,iBAAS,KAAK,MAAL,CAAY,KAAK,OAAL,CAArB;AACA,cAAM,IAAN;OAFK,CAAP,CAF6B;;;;8CAQL,MAAM;;;AAC9B,aAAO,oBAAS,qBAAT,EAAgC;AACrC,cAAM,KAAK,IAAL;AACN,qBAAa,KAAK,WAAL,CAAiB,GAAjB,CAAqB;iBAAK,QAAK,MAAL,CAAY,CAAZ;SAAL,CAAlC;OAFK,CAAP,CAD8B;;;;kDAOF,MAAM;AAClC,UAAI,KAAK,KAAL,CAAW,IAAX,KAAoB,CAApB,EAAuB;AACzB,cAAM,IAAI,KAAJ,CAAU,yBAAV,CAAN,CADyB;OAA3B;AAGA,UAAI,MAAM,2BAAe,KAAK,KAAL,EAAY,sBAA3B,EAAmC,KAAK,OAAL,CAAzC,CAJ8B;AAKlC,UAAI,YAAY,IAAI,IAAJ,EAAZ,CAL8B;AAMlC,UAAI,IAAI,IAAI,kBAAJ,EAAJ,CAN8B;AAOlC,UAAI,KAAK,IAAL,IAAa,IAAI,IAAJ,CAAS,IAAT,GAAgB,CAAhB,EAAmB;AAClC,cAAM,IAAI,WAAJ,CAAgB,SAAhB,EAA2B,mBAA3B,CAAN,CADkC;OAApC;AAGA,aAAO,KAAK,MAAL,CAAY,CAAZ,CAAP,CAVkC;;;;0CAad,MAAM;AAC1B,aAAO,oBAAS,iBAAT,EAA4B;AACjC,kBAAU,KAAK,QAAL;AACV,iBAAS,KAAK,MAAL,CAAY,KAAK,OAAL,CAArB;OAFK,CAAP,CAD0B;;;;2CAOL,MAAM;AAC3B,aAAO,oBAAS,kBAAT,EAA6B;AAClC,kBAAU,KAAK,QAAL;AACV,kBAAU,KAAK,QAAL;AACV,iBAAS,KAAK,MAAL,CAAY,KAAK,OAAL,CAArB;OAHK,CAAP,CAD2B;;;;2CAQN,MAAM;AAC3B,UAAI,OAAO,KAAK,MAAL,CAAY,KAAK,IAAL,CAAnB,CADuB;AAE3B,UAAI,QAAQ,KAAK,MAAL,CAAY,KAAK,KAAL,CAApB,CAFuB;AAG3B,aAAO,oBAAS,kBAAT,EAA6B;AAClC,cAAM,IAAN;AACA,kBAAU,KAAK,QAAL;AACV,eAAO,KAAP;OAHK,CAAP,CAH2B;;;;gDAUD,MAAM;AAChC,aAAO,oBAAS,uBAAT,EAAkC;AACvC,cAAM,KAAK,MAAL,CAAY,KAAK,IAAL,CAAlB;AACA,oBAAY,KAAK,MAAL,CAAY,KAAK,UAAL,CAAxB;AACA,mBAAW,KAAK,MAAL,CAAY,KAAK,SAAL,CAAvB;OAHK,CAAP,CADgC;;;;8CAQR,MAAM;AAAE,aAAO,IAAP,CAAF;;;;wCAEZ,MAAM;;;AACxB,UAAI,SAAS,KAAK,MAAL,CAAY,KAAK,MAAL,CAArB,CADoB;AAExB,UAAI,MAAM,2BAAe,KAAK,SAAL,EAAgB,sBAA/B,EAAuC,KAAK,OAAL,CAA7C,CAFoB;AAGxB,UAAI,OAAO,IAAI,oBAAJ,GAA2B,GAA3B,CAA+B;eAAO,QAAK,MAAL,CAAY,GAAZ;OAAP,CAAtC,CAHoB;AAIxB,aAAO,oBAAS,eAAT,EAA0B;AAC/B,sBAD+B;AAE/B,mBAAW,KAAK,OAAL,EAAX;OAFK,CAAP,CAJwB;;;;gCAUd,MAAM;AAAE,aAAO,IAAP,CAAF;;;;yCAEG,MAAM;;;AACzB,UAAI,SAAS,KAAK,MAAL,CAAY,KAAK,MAAL,CAArB,CADqB;AAEzB,UAAI,MAAM,2BAAe,KAAK,SAAL,EAAgB,sBAA/B,EAAuC,KAAK,OAAL,CAA7C,CAFqB;AAGzB,UAAI,OAAO,IAAI,oBAAJ,GAA2B,GAA3B,CAA+B;eAAO,QAAK,MAAL,CAAY,GAAZ;OAAP,CAAtC,CAHqB;AAIzB,aAAO,oBAAS,gBAAT,EAA2B;AAChC,gBAAQ,MAAR;AACA,mBAAW,IAAX;OAFK,CAAP,CAJyB;;;;wCAUP,MAAM;AACxB,aAAO,oBAAS,eAAT,EAA0B;AAC/B,oBAAY,KAAK,MAAL,CAAY,KAAK,UAAL,CAAxB;OADK,CAAP,CADwB;;;;8CAMA,MAAM;AAC9B,UAAI,QAAQ,KAAK,MAAL,CAAY,KAAK,UAAL,CAApB,CAD0B;AAE9B,aAAO,oBAAS,qBAAT,EAAgC;AACrC,oBAAY,KAAZ;OADK,CAAP,CAF8B;;;;2CAOT,MAAM;AAC3B,aAAO,oBAAS,kBAAT,EAA6B;AAClC,eAAO,KAAK,KAAL,CAAW,GAAX,EAAP;AACA,cAAM,KAAK,MAAL,CAAY,KAAK,IAAL,CAAlB;OAFK,CAAP,CAD2B;;;;wCAOT,MAAM,MAAM;;;AAC9B,UAAI,QAAQ,uBAAW,KAAX,CAAR,CAD0B;AAE9B,UAAI,aAAa,KAAK,IAAL,CAAU,GAAV,CAAc;eAAK,EAAE,QAAF,CAAW,KAAX,EAAkB,QAAK,OAAL,CAAa,QAAb;OAAvB,CAA3B,CAF0B;AAG9B,UAAI,MAAM,wCAA8B,KAA9B,EAAqC,KAAK,OAAL,CAA3C,CAH0B;AAI9B,UAAI,eAAJ,CAJ8B;AAK9B,UAAI,SAAS,QAAT,IAAqB,SAAS,QAAT,EAAmB;AAC1C,iBAAS,IAAI,SAAJ,CAAc,KAAK,MAAL,CAAvB,CAD0C;AAE1C,iBAAS,KAAK,MAAL,CAAY,MAAZ,CAAT,CAF0C;OAA5C;AAIA,WAAK,OAAL,CAAa,YAAb,CAA0B,IAA1B,CAA+B,KAA/B,EAT8B;AAU9B,UAAI,WAAW,uBAAa,KAAK,OAAL,CAAxB,CAV0B;;AAY9B,UAAI,WAAW,oBAAS,cAAT,EAAyB;AACtC,oBAAY,sBAAZ;AACA,oBAAY,SAAS,MAAT,CAAgB,UAAhB,CAAZ;OAFa,CAAX,CAZ0B;AAgB9B,WAAK,OAAL,CAAa,YAAb,CAA0B,GAA1B,GAhB8B;;AAkB9B,UAAI,SAAS,QAAT,EAAmB;AACrB,eAAO,oBAAS,IAAT,EAAe;AACpB,gBAAM,KAAK,MAAL,CAAY,KAAK,IAAL,CAAlB;AACA,gBAAM,QAAN;SAFK,CAAP,CADqB;OAAvB,MAKO,IAAI,SAAS,QAAT,EAAmB;AAC5B,eAAO,oBAAS,IAAT,EAAe;AACpB,gBAAM,KAAK,MAAL,CAAY,KAAK,IAAL,CAAlB;AACA,iBAAO,KAAK,KAAL;AACP,gBAAM,QAAN;SAHK,CAAP,CAD4B;OAAvB;AAOP,aAAO,oBAAS,IAAT,EAAe;AACpB,cAAM,KAAK,IAAL;AACN,qBAAa,KAAK,WAAL;AACb,gBAAQ,MAAR;AACA,cAAM,QAAN;OAJK,CAAP,CA9B8B;;;;iCAsCnB,MAAM;AACjB,aAAO,KAAK,mBAAL,CAAyB,IAAzB,EAA+B,QAA/B,CAAP,CADiB;;;;iCAIN,MAAM;AACjB,aAAO,KAAK,mBAAL,CAAyB,IAAzB,EAA+B,QAA/B,CAAP,CADiB;;;;iCAIN,MAAM;AACjB,aAAO,KAAK,mBAAL,CAAyB,IAAzB,EAA+B,QAA/B,CAAP,CADiB;;;;8CAIO,MAAM;AAC9B,aAAO,KAAK,mBAAL,CAAyB,IAAzB,EAA+B,qBAA/B,CAAP,CAD8B;;;;6CAIP,MAAM;AAC7B,aAAO,KAAK,mBAAL,CAAyB,IAAzB,EAA+B,oBAA/B,CAAP,CAD6B;;;;uDAII,MAAM;AACvC,aAAO,oBAAS,8BAAT,EAAyC;AAC9C,iBAAS,KAAK,MAAL,CAAY,KAAK,OAAL,CAArB;AACA,kBAAU,KAAK,QAAL;AACV,oBAAY,KAAK,MAAL,CAAY,KAAK,UAAL,CAAxB;OAHK,CAAP,CADuC;;;;+CAQd,MAAM;AAC/B,aAAO,oBAAS,sBAAT,EAAiC;AACtC,iBAAS,KAAK,MAAL,CAAY,KAAK,OAAL,CAArB;AACA,oBAAY,KAAK,MAAL,CAAY,KAAK,UAAL,CAAxB;OAFK,CAAP,CAD+B;;;;yCAOZ,MAAM;AACzB,aAAO,IAAP,CADyB;;;;mDAII,MAAM;AACnC,aAAO,IAAP,CADmC;;;;mDAIN,MAAM;AACnC,aAAO,IAAP,CADmC;;;;oDAGL,MAAM;AACpC,aAAO,IAAP,CADoC;;;;+CAIX,MAAM;AAC/B,UAAI,QAAQ,KAAK,OAAL,CAAa,GAAb,CAAiB,GAAjB,CAAqB,KAAK,IAAL,CAAU,OAAV,EAArB,CAAR,CAD2B;AAE/B,UAAI,KAAJ,EAAW;AACT,eAAO,oBAAS,sBAAT,EAAiC;AACtC,gBAAM,MAAM,EAAN;SADD,CAAP,CADS;OAAX;AAKA,aAAO,IAAP,CAP+B;;;;gDAUL,MAAM;AAChC,aAAO,IAAP,CADgC;;;;kDAIJ,MAAM;AAClC,aAAO,IAAP,CADkC;;;;kDAIN,MAAM;AAClC,aAAO,IAAP,CADkC;;;;SA9lBjB","file":"term-expander.js","sourcesContent":["import { List } from 'immutable';\nimport Term, {\n  isEOF, isBindingIdentifier, isFunctionDeclaration, isFunctionExpression,\n  isFunctionTerm, isFunctionWithName, isSyntaxDeclaration, isVariableDeclaration,\n  isVariableDeclarationStatement, isImport, isExport\n} from \"./terms\";\nimport { Scope, freshScope } from \"./scope\";\nimport ApplyScopeInParamsReducer from \"./apply-scope-in-params-reducer\";\nimport reducer, { MonoidalReducer } from \"shift-reducer\";\nimport Expander from './expander';\nimport Syntax from \"./syntax\";\nimport { serializer, makeDeserializer } from \"./serializer\";\nimport { enforestExpr, Enforester } from \"./enforester\";\nimport { assert } from './errors';\nimport { processTemplate }from './template-processor.js';\n\nexport default class TermExpander {\n  constructor(context) {\n    this.context = context;\n  }\n\n  expand(term) {\n    let field = \"expand\" + term.type;\n    if (typeof this[field] === 'function') {\n      return this[field](term);\n    }\n    assert(false, \"expand not implemented yet for: \" + term.type);\n  }\n\n  expandTemplateExpression(term) {\n    return new Term('TemplateExpression', {\n      tag: term.tag == null ? null : this.expand(term.tag),\n      elements: term.elements.toArray()\n    });\n  }\n\n  expandBreakStatement(term) {\n    return new Term('BreakStatement', {\n      label: term.label ? term.label.val() : null\n    });\n  }\n\n  expandDoWhileStatement(term) {\n    return new Term('DoWhileStatement', {\n      body: this.expand(term.body),\n      test: this.expand(term.test)\n    });\n  }\n\n  expandWithStatement(term) {\n    return new Term('WithStatement', {\n      body: this.expand(term.body),\n      object: this.expand(term.object)\n    });\n  }\n\n  expandDebuggerStatement(term) { return term;}\n\n  expandContinueStatement(term) {\n    return new Term('ContinueStatement', {\n      label: term.label ? term.label.val() : null\n    });\n  }\n\n  expandSwitchStatementWithDefault(term) {\n    return new Term('SwitchStatementWithDefault', {\n      discriminant: this.expand(term.discriminant),\n      preDefaultCases: term.preDefaultCases.map(c => this.expand(c)).toArray(),\n      defaultCase: this.expand(term.defaultCase),\n      postDefaultCases: term.postDefaultCases.map(c => this.expand(c)).toArray()\n    });\n  }\n\n  expandComputedMemberExpression(term) {\n    return new Term('ComputedMemberExpression', {\n      object: this.expand(term.object),\n      expression: this.expand(term.expression)\n    });\n  }\n\n  expandSwitchStatement(term) {\n    return new Term('SwitchStatement', {\n      discriminant: this.expand(term.discriminant),\n      cases: term.cases.map(c => this.expand(c)).toArray()\n    });\n  }\n\n  expandFormalParameters(term) {\n    let rest = term.rest == null ? null : this.expand(term.rest);\n    return new Term('FormalParameters', {\n      items: term.items.map(i => this.expand(i)),\n      rest\n    });\n  }\n\n  expandArrowExpression(term) {\n    let body;\n    if (List.isList(term.body)) {\n      let scope = freshScope('fun');\n      this.context.currentScope.push(scope);\n      let expander = new Expander(this.context);\n\n      body = new Term(\"FunctionBody\", {\n        directives: List(),\n        statements: expander.expand(term.body.map(s => s.addScope(scope, this.context.bindings)))\n      });\n      this.context.currentScope.pop();\n    } else {\n      body = this.expand(term.body);\n    }\n    return new Term('ArrowExpression', {\n      // TODO: hygiene\n      params: this.expand(term.params),\n      body\n    });\n  }\n\n  expandSwitchDefault(term) {\n    return new Term('SwitchDefault', {\n      consequent: term.consequent.map(c => this.expand(c)).toArray()\n    });\n  }\n\n  expandSwitchCase(term) {\n    return new Term('SwitchCase', {\n      test: this.expand(term.test),\n      consequent: term.consequent.map(c => this.expand(c)).toArray()\n    });\n  }\n\n  expandForInStatement(term) {\n    return new Term('ForInStatement', {\n      left: this.expand(term.left),\n      right: this.expand(term.right),\n      body: this.expand(term.body)\n    });\n  }\n\n  expandTryCatchStatement(term) {\n    return new Term('TryCatchStatement', {\n      body: this.expand(term.body),\n      catchClause: this.expand(term.catchClause)\n    });\n  }\n\n  expandTryFinallyStatement(term) {\n    let catchClause = term.catchClause == null ? null : this.expand(term.catchClause);\n    return new Term('TryFinallyStatement', {\n      body: this.expand(term.body),\n      catchClause,\n      finalizer: this.expand(term.finalizer)\n    });\n  }\n\n  expandCatchClause(term) {\n    return new Term('CatchClause', {\n      binding: this.expand(term.binding),\n      body: this.expand(term.body)\n    });\n  }\n\n  expandThrowStatement(term) {\n    return new Term('ThrowStatement', {\n      expression: this.expand(term.expression)\n    });\n  }\n\n  expandForOfStatement(term) {\n    return new Term('ForOfStatement', {\n      left: this.expand(term.left),\n      right: this.expand(term.right),\n      body: this.expand(term.body)\n    });\n  }\n\n  expandBindingIdentifier(term) {\n    return term;\n  }\n\n  expandBindingPropertyIdentifier(term) {\n    return term;\n  }\n  expandBindingPropertyProperty(term) {\n    return new Term('BindingPropertyProperty', {\n      name: this.expand(term.name),\n      binding: this.expand(term.binding)\n    });\n  }\n\n  expandComputedPropertyName(term) {\n    return new Term('ComputedPropertyName', {\n      expression: this.expand(term.expression)\n    });\n  }\n\n  expandObjectBinding(term) {\n    return new Term('ObjectBinding', {\n      properties: term.properties.map(t => this.expand(t)).toArray()\n    });\n  }\n\n  expandArrayBinding(term) {\n    let restElement = term.restElement == null ? null : this.expand(term.restElement);\n    return new Term('ArrayBinding', {\n      elements: term.elements.map(t => t == null ? null : this.expand(t)).toArray(),\n      restElement\n    });\n  }\n\n  expandBindingWithDefault(term) {\n    return new Term('BindingWithDefault', {\n      binding: this.expand(term.binding),\n      init: this.expand(term.init)\n    });\n  }\n\n  expandShorthandProperty(term) {\n    return new Term('ShorthandProperty', {\n      name: term.name.val()\n    });\n  }\n\n\n  expandForStatement(term) {\n    let init = term.init == null ? null : this.expand(term.init);\n    let test = term.test == null ? null : this.expand(term.test);\n    let update = term.update == null ? null : this.expand(term.update);\n    let body = this.expand(term.body);\n    return new Term('ForStatement', { init, test, update, body });\n  }\n\n  expandYieldExpression(term) {\n    let expr = term.expression == null ? null : this.expand(term.expression);\n    return new Term('YieldExpression', {\n      expression: expr\n    });\n  }\n\n  expandYieldGeneratorExpression(term) {\n    let expr = term.expression == null ? null : this.expand(term.expression);\n    return new Term('YieldGeneratorExpression', {\n      expression: expr\n    });\n  }\n\n  expandWhileStatement(term) {\n    return new Term('WhileStatement', {\n      test: this.expand(term.test),\n      body: this.expand(term.body)\n    });\n  }\n\n  expandIfStatement(term) {\n    let consequent = term.consequent == null ? null : this.expand(term.consequent);\n    let alternate = term.alternate == null ? null : this.expand(term.alternate);\n    return new Term('IfStatement', {\n      test: this.expand(term.test),\n      consequent: consequent,\n      alternate: alternate\n    });\n  }\n\n  expandBlockStatement(term) {\n    return new Term('BlockStatement', {\n      block: this.expand(term.block)\n    });\n  }\n\n  expandBlock(term) {\n    return new Term('Block', {\n      statements: term.statements.map(s => this.expand(s)).toArray()\n    });\n  }\n\n  expandVariableDeclarationStatement(term) {\n    return new Term('VariableDeclarationStatement', {\n      declaration: this.expand(term.declaration)\n    });\n  }\n  expandReturnStatement(term) {\n    if (term.expression == null) {\n      return term;\n    }\n    return new Term(\"ReturnStatement\", {\n      expression: this.expand(term.expression)\n    });\n  }\n\n  expandClassDeclaration(term) {\n    return new Term('ClassDeclaration', {\n      name: term.name == null ? null : this.expand(term.name),\n      super: term.super == null ? null : this.expand(term.super),\n      elements: term.elements.map(el => this.expand(el)).toArray()\n    });\n  }\n\n  expandClassExpression(term) {\n    return new Term('ClassExpression', {\n      name: term.name == null ? null : this.expand(term.name),\n      super: term.super == null ? null : this.expand(term.super),\n      elements: term.elements.map(el => this.expand(el)).toArray()\n    });\n  }\n\n  expandClassElement(term) {\n    return new Term('ClassElement', {\n      isStatic: term.isStatic,\n      method: this.expand(term.method)\n    });\n  }\n\n  expandThisExpression(term) {\n    return term;\n  }\n\n  expandSyntaxTemplate(term) {\n    let expander = new Expander(this.context);\n    let r = processTemplate(term.template.inner());\n    let str = Syntax.fromString(serializer.write(r.template));\n    let callee = new Term('IdentifierExpression', { name: Syntax.fromIdentifier('syntaxTemplate') });\n\n    let expandedInterps = r.interp.map(i => {\n      let enf = new Enforester(i, List(), this.context);\n      return this.expand(enf.enforest('expression'));\n    });\n\n    let args = List.of(new Term('LiteralStringExpression', {value: str }))\n                   .concat(expandedInterps);\n\n    return new Term('CallExpression', {\n      callee, arguments: args\n    });\n  }\n\n  expandSyntaxQuote(term) {\n    let str = new Term(\"LiteralStringExpression\", {\n      value: Syntax.fromString(serializer.write(term.name))\n    });\n\n    return new Term(\"TemplateExpression\", {\n      tag: term.template.tag,\n      elements: term.template.elements.push(str).push(new Term('TemplateElement', {\n        rawValue: ''\n      })).toArray()\n    });\n  }\n\n  expandStaticMemberExpression(term) {\n    return new Term(\"StaticMemberExpression\", {\n      object: this.expand(term.object),\n      property: term.property\n    });\n  }\n\n  expandArrayExpression(term) {\n    return new Term(\"ArrayExpression\", {\n      elements: term.elements.map(t => t == null ? t : this.expand(t))\n    });\n  }\n\n  expandImport(term) {\n    return term;\n  }\n\n  expandImportNamespace(term) {\n    return term;\n  }\n\n  expandExport(term) {\n    return new Term('Export', {\n      declaration: this.expand(term.declaration)\n    });\n  }\n\n  expandExportDefault(term) {\n    return new Term('ExportDefault', {\n      body: this.expand(term.body)\n    });\n  }\n\n\n  expandExportFrom(term) {\n    return term;\n  }\n\n  expandExportAllFrom(term) {\n    return term;\n  }\n\n  expandExportSpecifier(term) {\n    return term;\n  }\n\n  expandStaticPropertyName(term) {\n    return term;\n  }\n\n  expandDataProperty(term) {\n    return new Term(\"DataProperty\", {\n      name: this.expand(term.name),\n      expression: this.expand(term.expression)\n    });\n  }\n\n\n  expandObjectExpression(term) {\n    return new Term(\"ObjectExpression\", {\n      properties: term.properties.map(t => this.expand(t))\n    });\n  }\n\n  expandVariableDeclarator(term) {\n    let init = term.init == null ? null : this.expand(term.init);\n    return new Term(\"VariableDeclarator\", {\n      binding: this.expand(term.binding),\n      init: init\n    });\n  }\n\n  expandVariableDeclaration(term) {\n    return new Term(\"VariableDeclaration\", {\n      kind: term.kind,\n      declarators: term.declarators.map(d => this.expand(d))\n    });\n  }\n\n  expandParenthesizedExpression(term) {\n    if (term.inner.size === 0) {\n      throw new Error(\"unexpected end of input\");\n    }\n    let enf = new Enforester(term.inner, List(), this.context);\n    let lookahead = enf.peek();\n    let t = enf.enforestExpression();\n    if (t == null || enf.rest.size > 0) {\n      throw enf.createError(lookahead, \"unexpected syntax\");\n    }\n    return this.expand(t);\n  }\n\n  expandUnaryExpression(term) {\n    return new Term('UnaryExpression', {\n      operator: term.operator,\n      operand: this.expand(term.operand)\n    });\n  }\n\n  expandUpdateExpression(term) {\n    return new Term('UpdateExpression', {\n      isPrefix: term.isPrefix,\n      operator: term.operator,\n      operand: this.expand(term.operand)\n    });\n  }\n\n  expandBinaryExpression(term) {\n    let left = this.expand(term.left);\n    let right = this.expand(term.right);\n    return new Term(\"BinaryExpression\", {\n      left: left,\n      operator: term.operator,\n      right: right\n    });\n  }\n\n  expandConditionalExpression(term) {\n    return new Term('ConditionalExpression', {\n      test: this.expand(term.test),\n      consequent: this.expand(term.consequent),\n      alternate: this.expand(term.alternate)\n    });\n  }\n\n  expandNewTargetExpression(term) { return term; }\n\n  expandNewExpression(term) {\n    let callee = this.expand(term.callee);\n    let enf = new Enforester(term.arguments, List(), this.context);\n    let args = enf.enforestArgumentList().map(arg => this.expand(arg));\n    return new Term('NewExpression', {\n      callee,\n      arguments: args.toArray()\n    });\n  }\n\n  expandSuper(term) { return term; }\n\n  expandCallExpression(term) {\n    let callee = this.expand(term.callee);\n    let enf = new Enforester(term.arguments, List(), this.context);\n    let args = enf.enforestArgumentList().map(arg => this.expand(arg));\n    return new Term(\"CallExpression\", {\n      callee: callee,\n      arguments: args\n    });\n  }\n\n  expandSpreadElement(term) {\n    return new Term('SpreadElement', {\n      expression: this.expand(term.expression)\n    });\n  }\n\n  expandExpressionStatement(term) {\n    let child = this.expand(term.expression);\n    return new Term(\"ExpressionStatement\", {\n      expression: child\n    });\n  }\n\n  expandLabeledStatement(term) {\n    return new Term('LabeledStatement', {\n      label: term.label.val(),\n      body: this.expand(term.body)\n    });\n  }\n\n  doFunctionExpansion(term, type) {\n    let scope = freshScope(\"fun\");\n    let markedBody = term.body.map(b => b.addScope(scope, this.context.bindings));\n    let red = new ApplyScopeInParamsReducer(scope, this.context);\n    let params;\n    if (type !== 'Getter' && type !== 'Setter') {\n      params = red.transform(term.params);\n      params = this.expand(params);\n    }\n    this.context.currentScope.push(scope);\n    let expander = new Expander(this.context);\n\n    let bodyTerm = new Term(\"FunctionBody\", {\n      directives: List(),\n      statements: expander.expand(markedBody)\n    });\n    this.context.currentScope.pop();\n\n    if (type === 'Getter') {\n      return new Term(type, {\n        name: this.expand(term.name),\n        body: bodyTerm\n      });\n    } else if (type === 'Setter') {\n      return new Term(type, {\n        name: this.expand(term.name),\n        param: term.param,\n        body: bodyTerm\n      });\n    }\n    return new Term(type, {\n      name: term.name,\n      isGenerator: term.isGenerator,\n      params: params,\n      body: bodyTerm\n    });\n  }\n\n  expandMethod(term) {\n    return this.doFunctionExpansion(term, 'Method');\n  }\n\n  expandSetter(term) {\n    return this.doFunctionExpansion(term, 'Setter');\n  }\n\n  expandGetter(term) {\n    return this.doFunctionExpansion(term, 'Getter');\n  }\n\n  expandFunctionDeclaration(term) {\n    return this.doFunctionExpansion(term, \"FunctionDeclaration\");\n  }\n\n  expandFunctionExpression(term) {\n    return this.doFunctionExpansion(term, \"FunctionExpression\");\n  }\n\n  expandCompoundAssignmentExpression(term) {\n    return new Term(\"CompoundAssignmentExpression\", {\n      binding: this.expand(term.binding),\n      operator: term.operator,\n      expression: this.expand(term.expression)\n    });\n  }\n\n  expandAssignmentExpression(term) {\n    return new Term(\"AssignmentExpression\", {\n      binding: this.expand(term.binding),\n      expression: this.expand(term.expression)\n    });\n  }\n\n  expandEmptyStatement(term) {\n    return term;\n  }\n\n  expandLiteralBooleanExpression(term) {\n    return term;\n  }\n\n  expandLiteralNumericExpression(term) {\n    return term;\n  }\n  expandLiteralInfinityExpression(term) {\n    return term;\n  }\n\n  expandIdentifierExpression(term) {\n    let trans = this.context.env.get(term.name.resolve());\n    if (trans) {\n      return new Term(\"IdentifierExpression\", {\n        name: trans.id\n      });\n    }\n    return term;\n  }\n\n  expandLiteralNullExpression(term) {\n    return term;\n  }\n\n  expandLiteralStringExpression(term) {\n    return term;\n  }\n\n  expandLiteralRegExpExpression(term) {\n    return term;\n  }\n}\n"],"sourceRoot":"/source/"}