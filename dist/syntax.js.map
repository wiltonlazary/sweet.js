{"version":3,"sources":["syntax.js"],"names":[],"mappings":"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","file":"syntax.js","sourcesContent":["import { List } from \"immutable\";\nimport { assert } from \"./errors\";\nimport BindingMap from \"./binding-map\";\nimport { Maybe } from \"ramda-fantasy\";\nimport * as _ from 'ramda';\nconst Just = Maybe.Just;\nconst Nothing = Maybe.Nothing;\n\nimport { TokenType, TokenClass } from \"shift-parser/dist/tokenizer\";\n\nfunction sizeDecending(a, b) {\n  if (a.scopes.size > b.scopes.size) {\n    return -1;\n  } else if (b.scopes.size > a.scopes.size) {\n    return 1;\n  } else {\n    return 0;\n  }\n}\n\nexport default class Syntax {\n  // (Token or List<Syntax>, List<Scope>) -> Syntax\n  constructor(token, context = {bindings: new BindingMap(), scopeset: List()}) {\n    this.token = token;\n    this.context = {\n      bindings: context.bindings,\n      scopeset: context.scopeset\n    };\n    Object.freeze(this.context);\n    Object.freeze(this);\n  }\n\n  static of(token, stx = {}) {\n    return new Syntax(token, stx.context);\n  }\n\n  static fromNull(stx = {}) {\n    return new Syntax({\n      type: TokenType.NULL,\n      value: null\n    }, stx.context);\n  }\n\n  static fromNumber(value, stx = {}) {\n    return new Syntax({\n      type: TokenType.NUMBER,\n      value: value\n    }, stx.context);\n  }\n\n  static fromString(value, stx = {}) {\n    return new Syntax({\n      type: TokenType.STRING,\n      str: value\n    }, stx.context);\n  }\n\n  static fromPunctuator(value, stx = {}) {\n    return new Syntax({\n      type: {\n        klass: TokenClass.Punctuator,\n        name: value\n      },\n      value: value\n    }, stx.context);\n  }\n\n  static fromKeyword(value, stx = {}) {\n    return new Syntax({\n      type: {\n        klass: TokenClass.Keyword,\n        name: value\n      },\n      value: value\n    }, stx.context);\n  }\n\n  static fromIdentifier(value, stx = {}) {\n    return new Syntax({\n      type: TokenType.IDENTIFIER,\n      value: value\n    }, stx.context);\n  }\n\n  static fromRegularExpression(value, stx = {}) {\n    return new Syntax({\n      type: TokenType.REGEXP,\n      value: value\n    }, stx.context);\n  }\n\n  static fromBraces(inner, stx = {}) {\n    let left = new Syntax({\n      type: TokenType.LBRACE,\n      value: \"{\"\n    });\n    let right = new Syntax({\n      type: TokenType.RBRACE,\n      value: \"}\"\n    });\n    return new Syntax(List.of(left).concat(inner).push(right), stx.context);\n  }\n\n  static fromBrackets(inner, stx = {}) {\n    let left = new Syntax({\n      type: TokenType.LBRACK,\n      value: \"[\"\n    });\n    let right = new Syntax({\n      type: TokenType.RBRACK,\n      value: \"]\"\n    });\n    return new Syntax(List.of(left).concat(inner).push(right), stx.context);\n  }\n\n  static fromParens(inner, stx = {}) {\n    let left = new Syntax({\n      type: TokenType.LPAREN,\n      value: \"(\"\n    });\n    let right = new Syntax({\n      type: TokenType.RPAREN,\n      value: \")\"\n    });\n    return new Syntax(List.of(left).concat(inner).push(right), stx.context);\n  }\n\n\n  // () -> string\n  resolve() {\n    if (this.context.scopeset.size === 0 || !(this.isIdentifier() || this.isKeyword())) {\n      return this.token.value;\n    }\n    let scope = this.context.scopeset.last();\n    let stxScopes = this.context.scopeset;\n    let bindings = this.context.bindings;\n    if (scope) {\n      // List<{ scopes: List<Scope>, binding: Symbol }>\n      let scopesetBindingList = bindings.get(this);\n\n      if (scopesetBindingList) {\n        // { scopes: List<Scope>, binding: Symbol }\n        let biggestBindingPair = scopesetBindingList.filter(({scopes, binding}) => {\n          return scopes.isSubset(stxScopes);\n        }).sort(sizeDecending);\n\n        if (biggestBindingPair.size >= 2 &&\n            biggestBindingPair.get(0).scopes.size === biggestBindingPair.get(1).scopes.size) {\n          let debugBase = '{' + stxScopes.map(s => s.toString()).join(', ') + '}';\n          let debugAmbigousScopesets = biggestBindingPair.map(({scopes}) => {\n            return '{' + scopes.map(s => s.toString()).join(', ') + '}';\n          }).join(', ');\n          throw new Error('Scopeset ' + debugBase + ' has ambiguous subsets ' + debugAmbigousScopesets);\n        } else if (biggestBindingPair.size !== 0) {\n          let bindingStr = biggestBindingPair.get(0).binding.toString();\n          if (Maybe.isJust(biggestBindingPair.get(0).alias)) {\n            // null never happens because we just checked if it is a Just\n            return biggestBindingPair.get(0).alias.getOrElse(null).resolve();\n          }\n          return bindingStr;\n          // if (Maybe.isJust(biggestBindingPair.get(0).alias)) {\n          //   return biggestBindingPair.get(0).alias.just().resolve();\n          // }\n          // return ;\n        }\n      }\n    }\n    return this.token.value;\n  }\n\n  val() {\n    assert(!this.isDelimiter(), \"cannot get the val of a delimiter\");\n    if (this.isStringLiteral()) {\n      return this.token.str;\n    }\n    if (this.isTemplate()) {\n      return this.token.items.map(el => {\n        if (el instanceof Syntax && el.isDelimiter()) {\n          return '${...}';\n        }\n        return el.slice.text;\n      }).join('');\n    }\n    return this.token.value;\n  }\n\n  lineNumber() {\n    if (!this.isDelimiter()) {\n      return this.token.slice.startLocation.line;\n    } else {\n      // TODO: this is the start of the delimiter...correct?\n      return this.token.get(0).lineNumber();\n    }\n  }\n\n  // () -> List<Syntax>\n  inner() {\n    assert(this.isDelimiter(), \"can only get the inner of a delimiter\");\n    return this.token.slice(1, this.token.size - 1);\n  }\n\n  addScope(scope, bindings, options = { flip: false }) {\n    let token = this.isDelimiter() ? this.token.map(s => s.addScope(scope, bindings, options)) : this.token;\n    if (this.isTemplate()) {\n      token = {\n        type: this.token.type,\n        items: token.items.map(it => {\n          if (it instanceof Syntax && it.isDelimiter()) {\n            return it.addScope(scope, bindings, options);\n          }\n          return it;\n        })\n      };\n    }\n    let newScopeset;\n    // TODO: clean this logic up\n    if (options.flip) {\n      let index = this.context.scopeset.indexOf(scope);\n      if (index !== -1) {\n        newScopeset = this.context.scopeset.remove(index);\n      } else {\n        newScopeset = this.context.scopeset.push(scope);\n      }\n    } else {\n      newScopeset = this.context.scopeset.push(scope);\n    }\n    return new Syntax(token, {bindings: bindings, scopeset: newScopeset});\n  }\n  removeScope(scope) {\n    let token = this.isDelimiter() ? this.token.map(s => s.removeScope(scope)) : this.token;\n    let newScopeset = this.context.scopeset;\n    let index = this.context.scopeset.indexOf(scope);\n    if (index !== -1) {\n      newScopeset = this.context.scopeset.remove(index);\n    }\n    return new Syntax(token, { bindings: this.context.bindings, scopeset: newScopeset} );\n  }\n\n  isIdentifier() {\n    return !this.isDelimiter() && this.token.type.klass === TokenClass.Ident;\n  }\n\n  isAssign() {\n    return !this.isDelimiter() && this.token.type === TokenType.ASSIGN;\n  }\n\n  isBooleanLiteral() {\n    return !this.isDelimiter() && this.token.type === TokenType.TRUE ||\n           this.token.type === TokenType.FALSE;\n  }\n\n  isKeyword() {\n    return !this.isDelimiter() && this.token.type.klass === TokenClass.Keyword;\n  }\n\n  isNullLiteral() {\n    return !this.isDelimiter() && this.token.type === TokenType.NULL;\n  }\n\n  isNumericLiteral() {\n    return !this.isDelimiter() && this.token.type.klass === TokenClass.NumericLiteral;\n  }\n\n  isPunctuator() {\n    return !this.isDelimiter() && this.token.type.klass === TokenClass.Punctuator;\n  }\n\n  isStringLiteral() {\n    return !this.isDelimiter() && this.token.type.klass === TokenClass.StringLiteral;\n  }\n\n  isRegularExpression() {\n    return !this.isDelimiter() && this.token.type.klass === TokenClass.RegularExpression;\n  }\n\n  isTemplate() {\n    return !this.isDelimiter() && this.token.type === TokenType.TEMPLATE;\n  }\n\n  isDelimiter() {\n    return List.isList(this.token);\n  }\n\n  isParens() {\n    return this.isDelimiter() &&\n           this.token.get(0).token.type === TokenType.LPAREN;\n  }\n\n  isBraces() {\n    return this.isDelimiter() &&\n           this.token.get(0).token.type === TokenType.LBRACE;\n  }\n\n  isBrackets() {\n    return this.isDelimiter() &&\n           this.token.get(0).token.type === TokenType.LBRACK;\n  }\n\n  isSyntaxTemplate() {\n    return this.isDelimiter() && this.token.get(0).val() === '#`';\n  }\n\n  isEOF() {\n    return !this.isDelimiter() && this.token.type === TokenType.EOS;\n  }\n\n  toString() {\n    if (this.isDelimiter()) {\n      return this.token.map(s => s.toString()).join(\" \");\n    }\n    if (this.isStringLiteral()) {\n      return \"'\" + this.token.str;\n    }\n    if (this.isTemplate()) {\n      return this.val();\n    }\n    return this.token.value;\n  }\n}\n"],"sourceRoot":"/source/"}